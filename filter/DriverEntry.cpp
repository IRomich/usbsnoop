// Main program for UsbSnoop driver
// Generated by Walt Oney's driver wizard

#include "stddcls.h"
#include "driver.h"
#include "usbioctl.h"

NTSTATUS AddDevice(IN PDRIVER_OBJECT DriverObject, IN PDEVICE_OBJECT pdo);
VOID DriverUnload(IN PDRIVER_OBJECT fido);
NTSTATUS DispatchAny(IN PDEVICE_OBJECT fido, IN PIRP Irp);
NTSTATUS DispatchPower(IN PDEVICE_OBJECT fido, IN PIRP Irp);
NTSTATUS DispatchPnp(IN PDEVICE_OBJECT fido, IN PIRP Irp);
NTSTATUS DispatchWmi(IN PDEVICE_OBJECT fido, IN PIRP Irp);
NTSTATUS DispatchInternalIOCTL(IN PDEVICE_OBJECT fido, IN PIRP Irp);
NTSTATUS MyDispatchInternalIOCTL(IN PDEVICE_OBJECT fido, IN PIRP Irp);
void DumpURB(PURB pUrb, BOOLEAN bReturnedFromHCD);

BOOLEAN win98 = FALSE;
UNICODE_STRING servkey;
HANDLE fileHandle = (HANDLE)NULL;
KSEMAPHORE DataToBeRead;
//PWORK_QUEUE_ITEM BottomHalf;
HANDLE ThreadHandle;
BOOLEAN Loging;

struct RollingBuffer
{
	int StartPos;
	int EndPos;
	char Buffer[BUFFER_SIZE];
};


struct RollingBuffer LogBuffer;

char TempBuff[256];

// functions to handle conversion from PipeHandle to endpint number

struct ENDPOINT_INFO 
{
    USBD_PIPE_HANDLE PipeHandle;
	unsigned char    Endpoint;
};

struct ENDPOINT_INFO TabEndpointInfo[10] =
{
	{ NULL, 0 },
};

bool GetEndpointInfo(USBD_PIPE_HANDLE inPipeHandle, unsigned char * outEndpoint)
{
	for (int i=0;i<arraysize(TabEndpointInfo);i++)
	{
		if (TabEndpointInfo[i].PipeHandle != NULL 
			&& TabEndpointInfo[i].PipeHandle == inPipeHandle)
		{
			*outEndpoint = TabEndpointInfo[i].Endpoint;
			return true;
		}
	}

	return false;
}

//		Jean-Séabstien Valette
//
//		FillRollingBuffer
//
//		13 09 2001
//
//		Copy a string to the rolling Buffer

void inline FillRollingBuffer(char *s)
{
	int bufflen;

	bufflen = strlen(s);

	if(LogBuffer.EndPos >= LogBuffer.StartPos)
		if(LogBuffer.EndPos + bufflen <= BUFFER_SIZE)
		{
			//KdPrint(("Fillrollingbuffer 1\n"));
			memcpy(LogBuffer.Buffer + LogBuffer.EndPos,
				s,bufflen);
			LogBuffer.EndPos +=  bufflen;
		}
		else
		{
			//KdPrint(("Fillrollingbuffer 2\n"));
			memcpy(LogBuffer.Buffer + LogBuffer.EndPos,
				s,BUFFER_SIZE - LogBuffer.EndPos);
			memcpy(LogBuffer.Buffer, s + BUFFER_SIZE - LogBuffer.EndPos,
				bufflen - (BUFFER_SIZE - LogBuffer.EndPos));
			LogBuffer.EndPos += bufflen - BUFFER_SIZE;

		}
	else
		if(LogBuffer.EndPos + bufflen < LogBuffer.StartPos)
		{
			//KdPrint(("\n\nFillrollingbuffer 3\n"));
			//if(LogBuffer.EndPos + bufflen < BUFFER_SIZE)
			//{
				memcpy(LogBuffer.Buffer + LogBuffer.EndPos, s, bufflen);
				LogBuffer.EndPos +=  bufflen;
			//}
		}
		else
		{
			//KdPrint(("Fillrollingbuffer 4\n"));
			KdPrint(("usbsnoop : Buffer Overrun \n"));
			//KdPrint(("usbsnoop : StartPos %d, Endpos : %d\n", 
			//	LogBuffer.StartPos, LogBuffer.EndPos));

		}
		//KdPrint(("usbsnoop: Start %d, Stop %d\n",
		//	LogBuffer.StartPos, LogBuffer.EndPos));
		if(LogBuffer.EndPos == BUFFER_SIZE) 
			LogBuffer.EndPos = 0 ;


}

//		Jean-Sébastien Valette
//
//		Write To LogFile
//
//		26 08 2001
//
//		09 09 2001 change to be a thread
//

VOID LogToFile(PVOID Parameter)
{
	char *test = "Test\n";
	NTSTATUS status;
	IO_STATUS_BLOCK ioStatusBlock;
	OBJECT_ATTRIBUTES objectAttributes;
	UNICODE_STRING unicodeObjectName;
	ANSI_STRING ansiObjectName;
	LARGE_INTEGER Timeout;
	int endpos;
	LARGE_INTEGER offset;

	char *version="UsbSnoop compiled on " __DATE__ " " __TIME__ "\n";

	
	//	Jean-Sébastien Valette 08 09 2001
	//
	//	try to open a log File

	RtlInitAnsiString(&ansiObjectName,"\\SystemRoot\\snoopy.log");
 	status = RtlAnsiStringToUnicodeString(&unicodeObjectName,
		&ansiObjectName,TRUE);
	if (status != STATUS_SUCCESS)
	{
 		sprintf(TempBuff,
			"RtlAnsiStringToUnicodeString failed, status = 0x%xx\n",
			status);
		FillRollingBuffer(TempBuff);
	}
	InitializeObjectAttributes(&objectAttributes,&unicodeObjectName,
		0,NULL,NULL);


 
 	//status = ZwCreateFile(&fileHandle,FILE_WRITE_DATA|SYNCHRONIZE ,
	// 	&objectAttributes,&ioStatusBlock,NULL,FILE_ATTRIBUTE_NORMAL,FILE_SHARE_READ,
	//FILE_OPEN_IF,FILE_SYNCHRONOUS_IO_NONALERT,NULL,0);
	status = ZwCreateFile(&fileHandle,GENERIC_WRITE,
	 	&objectAttributes,&ioStatusBlock,NULL,FILE_ATTRIBUTE_NORMAL,FILE_SHARE_READ,
	FILE_OPEN_IF,FILE_SYNCHRONOUS_IO_NONALERT,NULL,0);
 	if (status != STATUS_SUCCESS)
 		KdPrint(("ZwCreateFile failed, status = 0x%x\n",status));
	else
		KdPrint(("\n\nusbsnoop: File Opened\nusbsnoop: fileHandle = %x\n",
			fileHandle));

	status = ZwWriteFile(fileHandle,NULL,NULL,NULL,&ioStatusBlock,version,
				(unsigned long)strlen(version),NULL,NULL);
	if(status != STATUS_SUCCESS )
	{
		KdPrint(("Can't write into Logfile, status = %x\n",status));
		ZwClose(fileHandle);
	}
	Timeout.QuadPart = -1000000;
	Loging = TRUE;
	offset.QuadPart = strlen(version);
	while(Loging != FALSE)
	{
		status = KeWaitForSingleObject(&DataToBeRead,Executive, KernelMode,
			FALSE,&Timeout);
		if(status == STATUS_SUCCESS)
		{
			KdPrint(("usbsnoop: LogToFile AWAKE !\n"));
			endpos = LogBuffer.EndPos;
			if(LogBuffer.StartPos != endpos)
			{
				//KdPrint(("usbsnoop: Start %d, Stop %d\n",
				//	LogBuffer.StartPos, endpos));
				//KdPrint(("UsbSnoop: offset %Ld\n",offset.QuadPart));
				//KdPrint(("UsbSnoop: string for file %.30s\n %Ld\n",
				//	&(LogBuffer.Buffer[LogBuffer.StartPos])));
				if( endpos > LogBuffer.StartPos)
				{
					status = ZwWriteFile(fileHandle,NULL,NULL,NULL,
						&ioStatusBlock, 
						&(LogBuffer.Buffer[LogBuffer.StartPos]), 
						endpos - LogBuffer.StartPos , &offset,NULL);
					if( status != STATUS_SUCCESS )
						KdPrint(("UsbSnoop : Can't WriteTofFile\nStatus %x",
								status));
					else
						offset.QuadPart += endpos - LogBuffer.StartPos;

				}
				else
				{
					if(LogBuffer.StartPos != BUFFER_SIZE)
					{
						ZwWriteFile(fileHandle,NULL,NULL,NULL,
							&ioStatusBlock,
							&(LogBuffer.Buffer[LogBuffer.StartPos]),
							BUFFER_SIZE - LogBuffer.StartPos, &offset,
							NULL);
						if( status != STATUS_SUCCESS )
							KdPrint(("UsbSnoop : Can't WriteTofFile\nStatus %x",
									status));
						else
							offset.QuadPart += BUFFER_SIZE - LogBuffer.StartPos;
					}
					ZwWriteFile(fileHandle,NULL,NULL,NULL,
						&ioStatusBlock,
						&(LogBuffer.Buffer[0]), endpos, &offset, NULL);
					if( status != STATUS_SUCCESS )
						KdPrint(("UsbSnoop : Can't WriteTofFile\nStatus %x",
								status));
					else
						offset.QuadPart += endpos;
				}
				LogBuffer.StartPos = endpos;
			}
		}
	}


	ZwClose(fileHandle);

	
	PsTerminateSystemThread(STATUS_SUCCESS);
	return;	
};




void AddEndpointInfo(USBD_PIPE_HANDLE inPipeHandle, unsigned char inEndpoint)
{
	int i;

	// search for an existing PipeHandle
	for (i=0;i<arraysize(TabEndpointInfo);i++)
	{
		if (TabEndpointInfo[i].PipeHandle != NULL 
			&& TabEndpointInfo[i].PipeHandle == inPipeHandle)
			return ; 
	}

	// search for a free slot 
	for (i=0;i<arraysize(TabEndpointInfo);i++)
	{
		if (TabEndpointInfo[i].PipeHandle == NULL)
		{
			TabEndpointInfo[i].PipeHandle = inPipeHandle;
			TabEndpointInfo[i].Endpoint = inEndpoint;
			return ;
		}
	}

	sprintf(TempBuff,"AddEndpointInfo failed!\n");
	FillRollingBuffer(TempBuff);
}



///////////////////////////////////////////////////////////////////////////////

void DumpStackLocation(PIO_STACK_LOCATION stack)
{
	if (stack == NULL)
		return ;

	sprintf(TempBuff,"\tMajorFunction=%d, MinorFunction=%d\n",
		stack->MajorFunction,stack->MinorFunction);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDeviceObject=%p\n",stack->DeviceObject);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tCompletionRoutine=%p Context=%p\n",
		stack->CompletionRoutine,stack->Context);
	FillRollingBuffer(TempBuff);

}

void DumpIrp(PIRP Irp)
{
	sprintf(TempBuff,"Dumping IRP %p\n",Irp);
	FillRollingBuffer(TempBuff);
	if (Irp==NULL)
		return ;

	sprintf(TempBuff,"\tType=%d, Size=%d\n",Irp->Type,Irp->Size);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tStackCount=%d, CurrentLocation=%d\n",
		Irp->StackCount,Irp->CurrentLocation);
	FillRollingBuffer(TempBuff);
	for (CHAR i=0;i<Irp->StackCount;i++)
	{
		PIO_STACK_LOCATION stack = (PIO_STACK_LOCATION) (Irp+1) + i;
		sprintf(TempBuff,"\t[%d] MajorFunction=%d, MinorFunction=%d, DeviceObject=%p\n",
			i,stack->MajorFunction, stack->MinorFunction,
			stack->DeviceObject);
		FillRollingBuffer(TempBuff);
		sprintf(TempBuff,"\tArg1=%p, Arg2=%p, Arg3=%p, Arg4=%p\n",
			stack->Parameters.Others.Argument1,
			stack->Parameters.Others.Argument2,
			stack->Parameters.Others.Argument3,
			stack->Parameters.Others.Argument4);
		FillRollingBuffer(TempBuff);
		sprintf(TempBuff,"\tCompletionRoutine=%p Context=%p\n",
			stack->CompletionRoutine,stack->Context);
		FillRollingBuffer(TempBuff);
	}
}

void DumpDriverObject(PDRIVER_OBJECT p)
{
	sprintf(TempBuff,"UsbSnoop - DumpDriverObject : p = %p\n",p);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tType = %d\n",p->Type);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tSize = %d\n",p->Size);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDeviceObject = %p\n",p->DeviceObject);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tFlags = 0x%x\n",p->Flags);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDriverStart = %p\n",p->DriverStart);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDriverSize = %d\n",p->DriverSize);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDriverSection = %p\n",p->DriverSection);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDriverExtension = %p\n",p->DriverExtension);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDriverExtension->AddDevice = %p\n",
		p->DriverExtension->AddDevice);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tFastIoDispatch = %p\n",p->FastIoDispatch);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"  DriverInit = %p\n",p->DriverInit);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDriverStartIo = %p\n",p->DriverStartIo);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDriverUnload = %p\n",p->DriverUnload);
	FillRollingBuffer(TempBuff);
	for (int i=0;i<IRP_MJ_MAXIMUM_FUNCTION + 1;i++)
	{
		sprintf(TempBuff,"\tMajorFunction[%d] = %p\n",i,
			p->MajorFunction[i]);
		FillRollingBuffer(TempBuff);
	}
}

void DumpDeviceObject(PDEVICE_OBJECT p)
{
	sprintf(TempBuff,"UsbSnoop - DumpDeviceObject : p = %p\n",p);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDriverObject = %p\n",p->DriverObject);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tNextDevice = %p\n",p->NextDevice);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tAttachedDevice = %p\n",p->AttachedDevice);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tStackSize=%d\n",p->StackSize);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tCurrentIrp = %p\n",p->CurrentIrp);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDeviceObjectExtension = %p\n",
		p->DeviceObjectExtension);
	FillRollingBuffer(TempBuff);

	PDEVICE_EXTENSION pdx = (PDEVICE_EXTENSION)p->DeviceObjectExtension;

	sprintf(TempBuff,"\t->DeviceObject=%p\n",pdx->DeviceObject);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\t->LowerDeviceObject=%p\n",
		pdx->LowerDeviceObject);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\t->Pdo=%p\n",pdx->Pdo);
	FillRollingBuffer(TempBuff);
}

void DumpContext(PCONTEXT Context)
{
	sprintf(TempBuff,"DumpContext : Context=%p\n",Context);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tCompletionRoutine=%p, Context=%p, Control=%x\n",
		Context->CompletionRoutine,Context->Context,Context->Control);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tpUrb=%p, uSequenceNumber=%d, Stack=%p\n",
		Context->pUrb,Context->uSequenceNumber,Context->Stack);
	FillRollingBuffer(TempBuff);
}

#pragma INITCODE

/*
	DriverEntry : this function is called whenever this driver is loaded in memory,
		this is the only entry point this is accessible for the OS. Other entry
		points will be set up inside DriverEntry().
*/

extern "C" NTSTATUS DriverEntry(IN PDRIVER_OBJECT DriverObject, IN PUNICODE_STRING RegistryPath)
{
	UCHAR MajorVersion, MinorVersion;

	//	Jean-Sebastien Vallette 25 08 2001
	//	Decaration for log file
	NTSTATUS status;
	LARGE_INTEGER ByteOffset;
	


	KdPrint(("UsbSnoop compiled on " __DATE__ " " __TIME__ "\n"));
	// Valette Jean-Sébastien
	//
	//	LogThread initialisation
	//
	//	Added 09 09 2001
	//	04 10 2001 : Move Global Buffer variable initialisation here 
	//				 Because of late Thread Init ! (loggin begins before
	//				 end of thread initialisation)
	LogBuffer.EndPos = LogBuffer.EndPos = 0;
	status = PsCreateSystemThread( &ThreadHandle,THREAD_ALL_ACCESS ,0,
					0,0, LogToFile,0);

	//	Valette Jean-Sébastien 
	//
	//	Initialize Semaphore
	//
	//	Added 09 09 2001
	KeInitializeSemaphore(&DataToBeRead,0,1000);



	ByteOffset.QuadPart = FILE_USE_FILE_POINTER_POSITION;
	
	// Insist that OS support at least the WDM 1.0 (Win98 DDK)
	
	if (!IoIsWdmVersionAvailable(1, 0))
	{
		sprintf(TempBuff,
			"UsbSnoop - Expected version of WDM (%d.%2.2d) not available\n",
			1, 0);
		FillRollingBuffer(TempBuff);
		return STATUS_UNSUCCESSFUL;
	}
	
	// See if we're running under Win98 or NT:
	
	win98 = !IoIsWdmVersionAvailable(1, 10); //DriverObject->DriverExtension->ServiceKeyName.Length == 0;
	
	MajorVersion = 0;
	MinorVersion = 0;

	while (IoIsWdmVersionAvailable(MajorVersion,MinorVersion))
		MajorVersion ++;

	MajorVersion --;

	while (IoIsWdmVersionAvailable(MajorVersion,MinorVersion))
		MinorVersion ++;
	MinorVersion --;

	if (win98)
		sprintf(TempBuff,
			"UsbSnoop - DriverEntry(%p) : Windows 98 WDM version %d.%d\n",
			DriverEntry,MajorVersion,MinorVersion);
	else
		sprintf(TempBuff,
		"UsbSnoop - DriverEntry(%p) : Windows NT WDM version %d.%d\n",
			DriverEntry,MajorVersion,MinorVersion);
	FillRollingBuffer(TempBuff);
//	DumpDriverObject(DriverObject);

	// Save the name of the service key

	servkey.Buffer = (PWSTR) ExAllocatePool(PagedPool, RegistryPath->MaximumLength);
	if (!servkey.Buffer)
	{
		sprintf(TempBuff,
			"UsbSnoop - Unable to allocate %d bytes for copy of service key name\n", 
			RegistryPath->MaximumLength);
		FillRollingBuffer(TempBuff);
		return STATUS_INSUFFICIENT_RESOURCES;
	}
	servkey.MaximumLength = RegistryPath->MaximumLength;
	RtlCopyUnicodeString(&servkey, RegistryPath);

	// Initialize function pointers

	DriverObject->DriverUnload = DriverUnload;
	DriverObject->DriverExtension->AddDevice = AddDevice;
	
	for (int i = 0; i < arraysize(DriverObject->MajorFunction); ++i)
		DriverObject->MajorFunction[i] = DispatchAny;

	// POWER IRP needs a special treatment
	DriverObject->MajorFunction[IRP_MJ_POWER] = DispatchPower;

	// we need a special callback to call RemoveDevice().
	// this is now done in MyDispatchPnp
//	DriverObject->MajorFunction[IRP_MJ_PNP] = DispatchPnp;

	// not needed
//	DriverObject->MajorFunction[IRP_MJ_SYSTEM_CONTROL] = DispatchWmi;

	// not needed
//	DriverObject->MajorFunction[IRP_MJ_INTERNAL_DEVICE_CONTROL] = DispatchInternalIOCTL;

//	DumpDriverObject(DriverObject);

	return STATUS_SUCCESS;
}

///////////////////////////////////////////////////////////////////////////////

#pragma PAGEDCODE

/*
	DriverUnload() is called whenever our driver is unloaded from memory.
*/

VOID DriverUnload(IN PDRIVER_OBJECT DriverObject)
{
	NTSTATUS status;
	PAGED_CODE();
	sprintf(TempBuff,"UsbSnoop - DriverUnload(%p) : DriverObject %p\n",
		DriverUnload,DriverObject);
	FillRollingBuffer(TempBuff);
//	DumpDriverObject(DriverObject);
	RtlFreeUnicodeString(&servkey);
	Loging = FALSE;
	
	sprintf(TempBuff,"usbsnoop : Closed File \n");
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"usbsnoop: status %x\n",status);
	FillRollingBuffer(TempBuff);


}

const char * GetIrpPnpMinorFunctionName(ULONG fcn)
{
	static const char* fcnname[] =
	{
		"IRP_MN_START_DEVICE",
		"IRP_MN_QUERY_REMOVE_DEVICE",
		"IRP_MN_REMOVE_DEVICE",
		"IRP_MN_CANCEL_REMOVE_DEVICE",
		"IRP_MN_STOP_DEVICE",
		"IRP_MN_QUERY_STOP_DEVICE",
		"IRP_MN_CANCEL_STOP_DEVICE",
		"IRP_MN_QUERY_DEVICE_RELATIONS",
		"IRP_MN_QUERY_INTERFACE",
		"IRP_MN_QUERY_CAPABILITIES",
		"IRP_MN_QUERY_RESOURCES",
		"IRP_MN_QUERY_RESOURCE_REQUIREMENTS",
		"IRP_MN_QUERY_DEVICE_TEXT",
		"IRP_MN_FILTER_RESOURCE_REQUIREMENTS",
		"",
		"IRP_MN_READ_CONFIG",
		"IRP_MN_WRITE_CONFIG",
		"IRP_MN_EJECT",
		"IRP_MN_SET_LOCK",
		"IRP_MN_QUERY_ID",
		"IRP_MN_QUERY_PNP_DEVICE_STATE",
		"IRP_MN_QUERY_BUS_INFORMATION",
		"IRP_MN_DEVICE_USAGE_NOTIFICATION",
		"IRP_MN_SURPRISE_REMOVAL",
	};

	if (0<=fcn && fcn<arraysize(fcnname))
		return fcnname[fcn];

	return NULL;
}

NTSTATUS MyDispatchPnp(IN PDEVICE_OBJECT fdo, IN PIRP Irp)
{
	PIO_STACK_LOCATION stack = IoGetCurrentIrpStackLocation(Irp);
	ULONG fcn = stack->MinorFunction;
	
	const char * MinorFunctionName = GetIrpPnpMinorFunctionName(fcn);
	if (MinorFunctionName != NULL)
		sprintf(TempBuff,
			"UsbSnoop - MyDispatchPNP(%p) : IRP_MJ_PNP (%s)\n",
			MyDispatchPnp,MinorFunctionName);
	else
		sprintf(TempBuff,
			"UsbSnoop - MyDispatchPNP(%p) : IRP_MJ_PNP (0x%x)\n",
			MyDispatchPnp,fcn);
	FillRollingBuffer(TempBuff);
	
	PDEVICE_OBJECT fido = fdo->AttachedDevice;
	NTSTATUS status;
	PDEVICE_EXTENSION pdx = (PDEVICE_EXTENSION) fido->DeviceExtension;

	status = pdx->OriginalDriverObject->MajorFunction[IRP_MJ_PNP](fdo,Irp);	

	// the following lines should be executed ONLY if DispatchPNP() callback
	// is not used, since it duplicates its work.

	if (fcn == IRP_MN_REMOVE_DEVICE)
		RemoveDevice(fido);
	
	return status;
}

/*
	AddDevice is called for each device we have to managed. This is where we
	get the oportunity to be added in the device object stack.
*/

NTSTATUS AddDevice(IN PDRIVER_OBJECT DriverObject, IN PDEVICE_OBJECT pdo)
{
	PAGED_CODE();
	sprintf(TempBuff,
		"UsbSnoop - AddDevice(%p) : DriverObject %p, pdo %p\n",
		AddDevice,DriverObject, pdo);
	FillRollingBuffer(TempBuff);
//	DumpDriverObject(DriverObject);
//	DumpDeviceObject(pdo);


	NTSTATUS status;
	
	// Create a UsbSnoop device object to represent the hardware we're managing.
	
	PDEVICE_OBJECT fido;

	status = IoCreateDevice(DriverObject, sizeof(DEVICE_EXTENSION),NULL,
		FILE_DEVICE_UNKNOWN, 0, FALSE, &fido);
	if (!NT_SUCCESS(status))
	{						// can't create device object
		sprintf(TempBuff,
			"UsbSnoop - IoCreateDevice failed - %X\n", status);
		FillRollingBuffer(TempBuff);
		return status;
	}						// can't create device object

	// Benoit PAPILLAULT 13/07/2001
	// fido->DeviceExtension is a user define structure whose size is passed
	// to IoCreateDevice(). We can store whatever we want inside.

	PDEVICE_EXTENSION pdx = (PDEVICE_EXTENSION) fido->DeviceExtension;
	
	// From this point forward, any error will have side effects that need to
	// be cleaned up. Using a try-finally block allows us to modify the program
	// easily without losing track of the side effects.
	
	__try
	{						// finish initialization
		IoInitializeRemoveLock(&pdx->RemoveLock, 0, 0, 255);
		pdx->DeviceObject = fido;
		pdx->Pdo = pdo;
		
		// Add our device object to the stack and propagate critical settings
		// from the immediately lower device object
		
		PDEVICE_OBJECT fdo = IoAttachDeviceToDeviceStack(fido, pdo);

		pdx->LowerDeviceObject = fdo;
		fido->Flags |= fdo->Flags & (DO_DIRECT_IO | DO_BUFFERED_IO | DO_POWER_PAGABLE | DO_POWER_INRUSH);
		fido->DeviceType = fdo->DeviceType;
		fido->Characteristics = fdo->Characteristics;
		fido->AlignmentRequirement = fdo->AlignmentRequirement;
		
		// Clear the "initializing" flag so that we can get IRPs
		
		fido->Flags &= ~DO_DEVICE_INITIALIZING;

//		DumpDriverObject(DriverObject);
//		DumpDeviceObject(fdo);
//		DumpDeviceObject(fido);
//		DumpDeviceObject(pdo);

		// we make a copy of fdo->DriverObject
		PDRIVER_OBJECT d = (PDRIVER_OBJECT)ExAllocatePool(PagedPool,sizeof(DRIVER_OBJECT));
		if (d != NULL)
		{
			*d = *fdo->DriverObject;

			// we make some changes to this copy
			d->MajorFunction[IRP_MJ_INTERNAL_DEVICE_CONTROL] = MyDispatchInternalIOCTL;
			d->MajorFunction[IRP_MJ_PNP]                     = MyDispatchPnp;

			// here is the trick : we save the original DriverObject
			// and next, it points to our modified copy
			pdx->OriginalDriverObject = fdo->DriverObject;
			fdo->DriverObject = d;

			sprintf(TempBuff,
				"  OriginalDriverObject = %p\n",
				pdx->OriginalDriverObject);
			FillRollingBuffer(TempBuff);
		}
		else
		{
			sprintf(TempBuff,
				"ExAllocatePool failed : not redirecting PDO->DriverObject\n");
			FillRollingBuffer(TempBuff);
		}
	}						// finish initialization
	__finally
	{						// cleanup side effects
		if (!NT_SUCCESS(status))
		{					// need to cleanup
			IoDeleteDevice(fido);
		}					// need to cleanup
	}						// cleanup side effects
	
	return status;
}

///////////////////////////////////////////////////////////////////////////////

#pragma LOCKEDCODE

NTSTATUS CompleteRequest(IN PIRP Irp, IN NTSTATUS status, IN ULONG info)
{
	Irp->IoStatus.Status = status;
	Irp->IoStatus.Information = info;
	IoCompleteRequest(Irp, IO_NO_INCREMENT);
	return status;
}

///////////////////////////////////////////////////////////////////////////////

#pragma LOCKEDCODE				// make no assumptions about pageability of dispatch fcns

NTSTATUS DispatchAny(IN PDEVICE_OBJECT fido, IN PIRP Irp)
{
	PDEVICE_EXTENSION pdx = (PDEVICE_EXTENSION) fido->DeviceExtension;
	PIO_STACK_LOCATION stack = IoGetCurrentIrpStackLocation(Irp);
	
	const char* irpname[] =
	{
		"IRP_MJ_CREATE",
		"IRP_MJ_CREATE_NAMED_PIPE",
		"IRP_MJ_CLOSE",
		"IRP_MJ_READ",
		"IRP_MJ_WRITE",
		"IRP_MJ_QUERY_INFORMATION",
		"IRP_MJ_SET_INFORMATION",
		"IRP_MJ_QUERY_EA",
		"IRP_MJ_SET_EA",
		"IRP_MJ_FLUSH_BUFFERS",
		"IRP_MJ_QUERY_VOLUME_INFORMATION",
		"IRP_MJ_SET_VOLUME_INFORMATION",
		"IRP_MJ_DIRECTORY_CONTROL",
		"IRP_MJ_FILE_SYSTEM_CONTROL",
		"IRP_MJ_DEVICE_CONTROL",
		"IRP_MJ_INTERNAL_DEVICE_CONTROL",
		"IRP_MJ_SHUTDOWN",
		"IRP_MJ_LOCK_CONTROL",
		"IRP_MJ_CLEANUP",
		"IRP_MJ_CREATE_MAILSLOT",
		"IRP_MJ_QUERY_SECURITY",
		"IRP_MJ_SET_SECURITY",
		"IRP_MJ_POWER",
		"IRP_MJ_SYSTEM_CONTROL",
		"IRP_MJ_DEVICE_CHANGE",
		"IRP_MJ_QUERY_QUOTA",
		"IRP_MJ_SET_QUOTA",
		"IRP_MJ_PNP",
	};
	
	UCHAR type = stack->MajorFunction;
	if (type >= arraysize(irpname))
		sprintf(TempBuff,
			"UsbSnoop - DispatchAny : Unknown IRP, MajorFunction=0x%x\n",
			type);
	else
		sprintf(TempBuff,"UsbSnoop - DispatchAny : %s\n",
		irpname[type]);
	FillRollingBuffer(TempBuff);
	
	// Pass request down without additional processing
	
	NTSTATUS status;
	status = IoAcquireRemoveLock(&pdx->RemoveLock, Irp);
	if (!NT_SUCCESS(status))
		return CompleteRequest(Irp, status, 0);
	IoSkipCurrentIrpStackLocation(Irp);
	status = IoCallDriver(pdx->LowerDeviceObject, Irp);
	IoReleaseRemoveLock(&pdx->RemoveLock, Irp);
	return status;
}

void DumpBuffer(unsigned char * buf, int len)
{
#define NB_BYTE 16 /* number of bytes displayed per line */

	char str[NB_BYTE*3 + 1];

	for (int i=0;i<len;i+=NB_BYTE)
	{
		char * p = str;

		for (int j=i;j<len&&j<i+NB_BYTE;j++)
		{
			char c;

			*p++ = ' ';
			c = (buf[j] >> 4) & 0xf;
			*p++ = (c<10) ? c+'0' : c-10+'a';
			c = buf[j] & 0xf;
			*p++ = (c<10) ? c+'0' : c-10+'a';
		}
		*p = 0;

		sprintf(TempBuff,"\t\t%04x:%s\n",i,str);
		FillRollingBuffer(TempBuff);
	}
}

void DumpTransferBuffer(PUCHAR pBuffer, PMDL pMdl, ULONG uBufferSize, BOOLEAN bPrintHeader)
{
	if(bPrintHeader)
	{
		sprintf(TempBuff,"\tTransferBufferLength\t= %08x\n", uBufferSize);
		FillRollingBuffer(TempBuff);
		sprintf(TempBuff,"\tTransferBuffer\t\t= %08x\n", pBuffer);
		FillRollingBuffer(TempBuff);
		sprintf(TempBuff,"\tTransferBufferMDL\t= %08x\n", pMdl);
		FillRollingBuffer(TempBuff);
	}
	else
	{
		if(pBuffer)
		{
			if(pMdl)
			{
				//KdPrint(("??? weird transfer buffer, both MDL and flat specified. Ignoring MDL\n"));
			}
			KdPrint(("BufferSize : %d\n", uBufferSize));
			DumpBuffer(pBuffer,uBufferSize);
		}
		else if(pMdl)
		{
			PUCHAR pMDLBuf = (PUCHAR)MmGetSystemAddressForMdl(pMdl);
			if(pMDLBuf)
				DumpBuffer(pMDLBuf,uBufferSize);
			else
			{
				sprintf(TempBuff,"*** error: can't map MDL!\n");
				FillRollingBuffer(TempBuff);
			}
		}
		else
		{
			sprintf(TempBuff,"\n\t\tno data supplied\n");
			FillRollingBuffer(TempBuff);
		}
	}
}

void DumpGetStatusRequest(struct _URB_CONTROL_GET_STATUS_REQUEST *pGetStatusRequest, BOOLEAN bReturnedFromHCD)
{
	DumpTransferBuffer((PUCHAR)pGetStatusRequest->TransferBuffer, pGetStatusRequest->TransferBufferMDL, pGetStatusRequest->TransferBufferLength, TRUE);
	if(pGetStatusRequest->TransferBufferLength != 1)
	{
		sprintf(TempBuff,
			"*** error - TransferBufferLength should be 1!\n");
		FillRollingBuffer(TempBuff);
	}
	if(bReturnedFromHCD)
	{
		DumpTransferBuffer((PUCHAR)pGetStatusRequest->TransferBuffer, pGetStatusRequest->TransferBufferMDL, pGetStatusRequest->TransferBufferLength, FALSE);
	}

	sprintf(TempBuff,"\tIndex\t\t= %02x\n",
		pGetStatusRequest->Index);
	FillRollingBuffer(TempBuff);
	
	if(pGetStatusRequest->UrbLink)
	{
		sprintf(TempBuff,"---> Linked URB:\n");
		FillRollingBuffer(TempBuff);
		DumpURB(pGetStatusRequest->UrbLink, bReturnedFromHCD);
		sprintf(TempBuff,"---< Linked URB\n");
		FillRollingBuffer(TempBuff);
	}
}

void DumpFeatureRequest(struct _URB_CONTROL_FEATURE_REQUEST *pFeatureRequest, BOOLEAN bReadFromDevice, BOOLEAN bReturnedFromHCD)
{
	sprintf(TempBuff,"\tFeatureSelector = %04x\n", 
		pFeatureRequest->FeatureSelector);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tIndex\t\t= %04x\n",
		pFeatureRequest->Index);
	FillRollingBuffer(TempBuff);
	if(pFeatureRequest->UrbLink)
	{
		sprintf(TempBuff,"---> Linked URB:\n");
		FillRollingBuffer(TempBuff);
		DumpURB(pFeatureRequest->UrbLink, bReturnedFromHCD);
		sprintf(TempBuff,"---< Linked URB\n");
		FillRollingBuffer(TempBuff);
	}
}

void DumpDescriptorRequest(struct _URB_CONTROL_DESCRIPTOR_REQUEST *pDescriptorRequest, BOOLEAN bReadFromDevice, BOOLEAN bReturnedFromHCD)
{
	DumpTransferBuffer((PUCHAR)pDescriptorRequest->TransferBuffer, pDescriptorRequest->TransferBufferMDL, pDescriptorRequest->TransferBufferLength, TRUE);
	if(((!bReadFromDevice) && (!bReturnedFromHCD)) || (bReadFromDevice && bReturnedFromHCD))
	{
		DumpTransferBuffer((PUCHAR)pDescriptorRequest->TransferBuffer, pDescriptorRequest->TransferBufferMDL, pDescriptorRequest->TransferBufferLength, FALSE);
	}

	sprintf(TempBuff,"\tIndex\t\t\t= %02x\n",
		pDescriptorRequest->Index);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tDescriptorType\t\t= %02x (%s)\n",
		pDescriptorRequest->DescriptorType,
		pDescriptorRequest->DescriptorType == USB_DEVICE_DESCRIPTOR_TYPE ? "USB_DEVICE_DESCRIPTOR_TYPE" :
		pDescriptorRequest->DescriptorType == USB_CONFIGURATION_DESCRIPTOR_TYPE ? "USB_CONFIGURATION_DESCRIPTOR_TYPE" :
		pDescriptorRequest->DescriptorType == USB_STRING_DESCRIPTOR_TYPE ? "USB_STRING_DESCRIPTOR_TYPE" : "<illegal descriptor type!>");
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tLanguageId\t\t= %04x\n",
		pDescriptorRequest->LanguageId);
	FillRollingBuffer(TempBuff);
	
	if(pDescriptorRequest->UrbLink)
	{
		sprintf(TempBuff,"---> Linked URB:\n");
		FillRollingBuffer(TempBuff);
		DumpURB(pDescriptorRequest->UrbLink, bReturnedFromHCD);
		sprintf(TempBuff,"---< Linked URB\n");
		FillRollingBuffer(TempBuff);
	}
}

void DumpVendorOrClassRequest(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *pFunctionClassInterface, BOOLEAN bReturnedFromHCD)
{
	BOOLEAN bReadFromDevice = (BOOLEAN)(pFunctionClassInterface->TransferFlags & USBD_TRANSFER_DIRECTION_IN);
	sprintf(TempBuff,"\tTransferFlags\t\t\t= %08x (%s, %sUSBD_SHORT_TRANSFER_OK)\n",
		pFunctionClassInterface->TransferFlags,
		bReadFromDevice ? "USBD_TRANSFER_DIRECTION_IN" : "USBD_TRANSFER_DIRECTION_OUT",
		pFunctionClassInterface->TransferFlags & USBD_SHORT_TRANSFER_OK ? "":"~");
	FillRollingBuffer(TempBuff);

	DumpTransferBuffer((PUCHAR)pFunctionClassInterface->TransferBuffer, pFunctionClassInterface->TransferBufferMDL, pFunctionClassInterface->TransferBufferLength, TRUE);
	if(((!bReadFromDevice) && (!bReturnedFromHCD)) || (bReadFromDevice && bReturnedFromHCD))
	{
		DumpTransferBuffer((PUCHAR)pFunctionClassInterface->TransferBuffer, pFunctionClassInterface->TransferBufferMDL, pFunctionClassInterface->TransferBufferLength, FALSE);
	}

	sprintf(TempBuff,"\tUrbLink\t\t\t\t= %08x\n",
		pFunctionClassInterface->UrbLink);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tRequestTypeReservedBits = %02x\n",
		pFunctionClassInterface->RequestTypeReservedBits);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tRequest\t\t\t\t= %02x\n",
		pFunctionClassInterface->Request);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tValue\t\t\t\t= %04x\n",
		pFunctionClassInterface->Value);
	FillRollingBuffer(TempBuff);
	sprintf(TempBuff,"\tIndex\t\t\t\t= %04x\n",
		pFunctionClassInterface->Index);
	FillRollingBuffer(TempBuff);
	if(pFunctionClassInterface->UrbLink)
	{
		sprintf(TempBuff,"---> Linked URB:\n");
		FillRollingBuffer(TempBuff);
		DumpURB(pFunctionClassInterface->UrbLink, bReturnedFromHCD);
		sprintf(TempBuff,"---< Linked URB\n");
		FillRollingBuffer(TempBuff);
	}

}

void DumpPipeHandle(const char *s,USBD_PIPE_HANDLE inPipeHandle)
{
	unsigned char ep;

	// search for the matching endpoint

	if (GetEndpointInfo(inPipeHandle,&ep))
		sprintf(TempBuff,"%s = %p [endpoint 0x%x]\n",s,inPipeHandle,ep);
	else
		sprintf(TempBuff,"%s = %p\n",s,inPipeHandle);
	FillRollingBuffer(TempBuff);
}

void DumpURB(PURB pUrb, BOOLEAN bReturnedFromHCD)
{
	//LARGE_INTEGER urbTime;
       
	if(NULL == pUrb)
	{
		sprintf(TempBuff,"UsbSnoop - URB == NULL ???\n");
		FillRollingBuffer(TempBuff);
		return;
	}
	//KeQuerySystemTime(&urbTime );

	USHORT wFunction = pUrb->UrbHeader.Function;
	USHORT wLength = pUrb->UrbHeader.Length;
	USBD_STATUS lUsbdStatus = pUrb->UrbHeader.Status;

	/* Status values are defined in <usbdi.h> as USBD_STATUS_XXX */
//	KdPrint(("  Header.Length = %d\n",          pUrb->UrbHeader.Length));
//	KdPrint(("  Header.Function = 0x%x\n",      pUrb->UrbHeader.Function));
//	KdPrint(("  Header.Status = 0x%x\n",        pUrb->UrbHeader.Status));
//	KdPrint(("  Header.UsbdDeviceHandle = %p\n",pUrb->UrbHeader.UsbdDeviceHandle));
//	KdPrint(("  Header.UsbdFlags = 0x%x\n",     pUrb->UrbHeader.UsbdFlags));

	switch(wFunction)
	{
	case URB_FUNCTION_SELECT_CONFIGURATION:
		{

			/* _URB_SELECT_CONFIGURATION is as follows :

			- a first block of 16 bytes : struct _URB_HEADER Hdr
			- a pointer (4 byes) : PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor
			      this can be a NULL pointer, in which case the array of USBD_INTERFACE_INFORMATION
				  is empty.
			- a handle (4 bytes) : USBD_CONFIGURATION_HANDLE ConfigurationHandle
			- an array of USBD_INTERFACE_INFORMATION, whose number are
			    ConfigurationDescriptor.bNumInterfaces

			each USBD_INTERFACE_INFORMATION contains fixed information (16 bytes), followed
			  by an array of USB_PIPE_INFORMATION (20 bytes) whose number is NumberOfPipes.
			*/

#define URB_SELECT_CONFIGURATION_SIZE 24

			struct _URB_SELECT_CONFIGURATION *pSelectConfiguration = (struct _URB_SELECT_CONFIGURATION*) pUrb;
			sprintf(TempBuff,"-- URB_FUNCTION_SELECT_CONFIGURATION:\n");
			FillRollingBuffer(TempBuff);
			if(pSelectConfiguration->Hdr.Length < URB_SELECT_CONFIGURATION_SIZE)
			{
				sprintf(TempBuff,"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pSelectConfiguration->Hdr.Length,URB_SELECT_CONFIGURATION_SIZE);
				FillRollingBuffer(TempBuff);
			}

			PUSB_CONFIGURATION_DESCRIPTOR pCD = pSelectConfiguration->ConfigurationDescriptor;
			sprintf(TempBuff,"\tConfigurationDescriptor\t= 0x%x %s\n",
				pCD,pCD ? "(configure)":"(unconfigure)");
			FillRollingBuffer(TempBuff);
			if (pCD == NULL)
				break;

			sprintf(TempBuff,"\tConfigurationDescriptor : bLength\t\t= %d\n", 
				pCD->bLength);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tConfigurationDescriptor : bDescriptorType\t= 0x%02x\n",
				pCD->bDescriptorType);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tConfigurationDescriptor : wTotalLength\t\t= 0x%04x\n",
				pCD->wTotalLength);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tConfigurationDescriptor : bNumInterfaces\t= 0x%02x\n",
				pCD->bNumInterfaces);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tConfigurationDescriptor : bConfigurationValue\t= 0x%02x\n",
				pCD->bConfigurationValue);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tConfigurationDescriptor : iConfiguration\t\t= 0x%02x\n",
				pCD->iConfiguration);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tConfigurationDescriptor : bmAttributes\t\t= 0x%02x\n", 
				pCD->bmAttributes);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tConfigurationDescriptor : MaxPower\t\t\t= 0x%02x\n",
				pCD->MaxPower);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tConfigurationHandle\t= 0x%08x\n",
				pSelectConfiguration->ConfigurationHandle);
			FillRollingBuffer(TempBuff);
			
			ULONG uNumInterfaces = pCD->bNumInterfaces;

			if(uNumInterfaces > 0xff)
			{
				sprintf(TempBuff,"*** error: uNumInterfaces is too large (%d), resetting to 1\n", 
					uNumInterfaces);
				FillRollingBuffer(TempBuff);
				uNumInterfaces = 1;
			}
			
			
			PUSBD_INTERFACE_INFORMATION pInterface = &pSelectConfiguration->Interface;
			for(ULONG i = 0; i < uNumInterfaces; i++)
			{
				sprintf(TempBuff,
					"\tInterface[%d]: Length\t\t\t\t= %d\n", i, 
					pInterface->Length);
				FillRollingBuffer(TempBuff);
				sprintf(TempBuff,
					"\tInterface[%d]: InterfaceNumber\t\t= %d\n", i, 
					pInterface->InterfaceNumber);
				FillRollingBuffer(TempBuff);
				sprintf(TempBuff,
					"\tInterface[%d]: AlternateSetting\t= %d\n", i, 
					pInterface->AlternateSetting);
				FillRollingBuffer(TempBuff);
				if(bReturnedFromHCD)
				{
					ULONG uNumPipes;
					sprintf(TempBuff,
						"\tInterface[%d]: Class\t\t\t\t\t= 0x%02x\n",
						i, pInterface->Class);
					FillRollingBuffer(TempBuff);
					sprintf(TempBuff,
						"\tInterface[%d]: SubClass\t\t\t\t= 0x%02x\n",
						i, pInterface->SubClass);
					FillRollingBuffer(TempBuff);
					sprintf(TempBuff,
						"\tInterface[%d]: Protocol\t\t\t\t= 0x%02x\n",
						i, pInterface->Protocol);
					FillRollingBuffer(TempBuff);
					sprintf(TempBuff,
						"\tInterface[%d]: InterfaceHandle\t= 0x%08x\n",
						i, pInterface->InterfaceHandle);
					FillRollingBuffer(TempBuff);
					sprintf(TempBuff,
						"\tInterface[%d]: NumberOfPipes\t\t= %d\n", 
						i, pInterface->NumberOfPipes);
					FillRollingBuffer(TempBuff);
					
					uNumPipes = pInterface->NumberOfPipes;
					if(uNumPipes > 0x1f)
					{
						sprintf(TempBuff,
							"*** error: uNumPipes is too large (%d), resetting to 1\n", 
							uNumPipes);
						FillRollingBuffer(TempBuff);
						uNumPipes = 1;
					}
					for(ULONG p = 0; p< uNumPipes; p++)
					{
						sprintf(TempBuff,
							"\tInterface[%d]: Pipes[%lu] : MaximumPacketSize\t= 0x%04x\n",
							i, p, pInterface->Pipes[p].MaximumPacketSize);
						FillRollingBuffer(TempBuff);
						sprintf(TempBuff,
							"\tInterface[%d]: Pipes[%lu] : EndpointAddress\t= 0x%02x\n",
							i, p, pInterface->Pipes[p].EndpointAddress);
						FillRollingBuffer(TempBuff);
						sprintf(TempBuff,
							"\tInterface[%d]: Pipes[%lu] : Interval\t\t\t\t= 0x%02x\n",
							i, p, pInterface->Pipes[p].Interval);
						FillRollingBuffer(TempBuff);
						sprintf(TempBuff,
							"\tInterface[%d]: Pipes[%lu] : PipeType\t\t\t\t= 0x%02x (%s)\n",
							i, p, pInterface->Pipes[p].PipeType,
							pInterface->Pipes[p].PipeType == UsbdPipeTypeControl ? "UsbdPipeTypeControl" :
						pInterface->Pipes[p].PipeType == UsbdPipeTypeIsochronous ? "UsbdPipeTypeIsochronous" :
						pInterface->Pipes[p].PipeType == UsbdPipeTypeBulk ? "UsbdPipeTypeBulk" :
						pInterface->Pipes[p].PipeType == UsbdPipeTypeInterrupt ? "UsbdPipeTypeInterrupt" : "!!! INVALID !!!");
						FillRollingBuffer(TempBuff);
						sprintf(TempBuff,
							"\tInterface[%d]: Pipes[%lu] : PipeHandle\t\t\t\t= 0x%p\n",
							i, p, pInterface->Pipes[p].PipeHandle);
						FillRollingBuffer(TempBuff);
						sprintf(TempBuff,
							"\tInterface[%d]: Pipes[%lu] : MaxTransferSize\t= 0x%08x\n",
							i, p, pInterface->Pipes[p].MaximumTransferSize);
						FillRollingBuffer(TempBuff);
						sprintf(TempBuff,
							"\tInterface[%d]: Pipes[%lu] : PipeFlags\t\t\t\t= 0x%02x\n",
							i, p, pInterface->Pipes[p].PipeFlags);
						FillRollingBuffer(TempBuff);

						AddEndpointInfo(pInterface->Pipes[p].PipeHandle,
							pInterface->Pipes[p].EndpointAddress);
					}
				}

				pInterface = (PUSBD_INTERFACE_INFORMATION) (((UCHAR*)pInterface) + pInterface->Length);
			}
		}
		break;

	case URB_FUNCTION_SELECT_INTERFACE:
		{
			struct _URB_SELECT_INTERFACE  *pSelectInterface = (struct _URB_SELECT_INTERFACE *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_SELECT_INTERFACE:\n");
			FillRollingBuffer(TempBuff);
			if(pSelectInterface->Hdr.Length < sizeof(struct _URB_SELECT_INTERFACE))
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pSelectInterface->Hdr.Length, 
					sizeof(struct _URB_SELECT_INTERFACE));
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tConfigurationHandle\t\t\t= 0x%08x\n",
				pSelectInterface->ConfigurationHandle);
			FillRollingBuffer(TempBuff);

			PUSBD_INTERFACE_INFORMATION pInterface = &pSelectInterface->Interface;
			
			sprintf(TempBuff,
				"\tInterface: Length\t\t\t\t= %d\n", 
				pInterface->Length);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,
				"\tInterface: InterfaceNumber\t\t= %d\n", 
				pInterface->InterfaceNumber);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,
				"\tInterface: AlternateSetting\t= %d\n", 
				pInterface->AlternateSetting);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,
				"\tInterface: Class\t\t\t\t= 0x%02x\n", 
				pInterface->Class);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,
				"\tInterface: SubClass\t\t\t= 0x%02x\n",
				pInterface->SubClass);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,
				"\tInterface: Protocol\t\t\t= 0x%02x\n",
				pInterface->Protocol);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,
				"\tInterface: InterfaceHandle\t= %p\n",
				pInterface->InterfaceHandle);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,
				"\tInterface: NumberOfPipes\t\t= %d\n",
				pInterface->NumberOfPipes);
			FillRollingBuffer(TempBuff);
			if(bReturnedFromHCD)
			{
				ULONG uNumPipes = pInterface->NumberOfPipes;
				if(uNumPipes > 0x1f)
				{
					sprintf(TempBuff,
						"*** error: uNumPipes is too large (%d), resetting to 1\n",
						uNumPipes);
					FillRollingBuffer(TempBuff);
					uNumPipes = 1;
				}
				for(ULONG p = 0; p< uNumPipes; p++)
				{
					sprintf(TempBuff,
						"\tInterface: Pipes[%lu] : MaximumPacketSize = 0x%04x\n", 
						p, pInterface->Pipes[p].MaximumPacketSize);
					FillRollingBuffer(TempBuff);
					sprintf(TempBuff,
						"\tInterface: Pipes[%lu] : EndpointAddress\t= 0x%02x\n",
						p, pInterface->Pipes[p].EndpointAddress);
					FillRollingBuffer(TempBuff);
					sprintf(TempBuff,
						"\tInterface: Pipes[%lu] : Interval\t\t\t= 0x%02x\n",
						p, pInterface->Pipes[p].Interval);
					FillRollingBuffer(TempBuff);
					sprintf(TempBuff,
						"\tInterface: Pipes[%lu] : PipeType\t\t\t= 0x%02x (%s)\n",
						p, pInterface->Pipes[p].PipeType,
						pInterface->Pipes[p].PipeType == UsbdPipeTypeControl ? "UsbdPipeTypeControl" :
						pInterface->Pipes[p].PipeType == UsbdPipeTypeIsochronous ? "UsbdPipeTypeIsochronous" :
						pInterface->Pipes[p].PipeType == UsbdPipeTypeBulk ? "UsbdPipeTypeBulk" :
						pInterface->Pipes[p].PipeType == UsbdPipeTypeInterrupt ? "UsbdPipeTypeInterrupt" : "!!! INVALID !!!");
						FillRollingBuffer(TempBuff);
					sprintf(TempBuff,
						"\tInterface: Pipes[%lu] : PipeHandle\t\t\t= 0x%p\n",
						p, pInterface->Pipes[p].PipeHandle);
					FillRollingBuffer(TempBuff);
					sprintf(TempBuff,
						"\tInterface: Pipes[%lu] : MaxTransferSize\t= 0x%08x\n",
						p, pInterface->Pipes[p].MaximumTransferSize);
					FillRollingBuffer(TempBuff);
					sprintf(TempBuff,
						"\tInterface: Pipes[%lu] : PipeFlags\t\t\t= 0x%02x\n",
						p, pInterface->Pipes[p].PipeFlags);
					FillRollingBuffer(TempBuff);

					AddEndpointInfo(pInterface->Pipes[p].PipeHandle,
						pInterface->Pipes[p].EndpointAddress);
				}
			}
		}
		break;
	case URB_FUNCTION_ABORT_PIPE:
		{
			struct _URB_PIPE_REQUEST   *pAbortPipe = (struct _URB_PIPE_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_ABORT_PIPE:\n");
			FillRollingBuffer(TempBuff);
			if(pAbortPipe->Hdr.Length < sizeof(struct _URB_PIPE_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pAbortPipe->Hdr.Length, sizeof(struct _URB_PIPE_REQUEST));
				FillRollingBuffer(TempBuff);
			}	

			if(!bReturnedFromHCD)
				DumpPipeHandle("  PipeHandle",pAbortPipe->PipeHandle);
		}
		break;
	case URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROL:
		{
			struct _URB_FRAME_LENGTH_CONTROL *pFrameLengthControl = (struct _URB_FRAME_LENGTH_CONTROL *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROL:\n");
			FillRollingBuffer(TempBuff);
			if(pFrameLengthControl->Hdr.Length < sizeof(struct _URB_FRAME_LENGTH_CONTROL))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pFrameLengthControl->Hdr.Length, 
					sizeof(struct _URB_FRAME_LENGTH_CONTROL));
				FillRollingBuffer(TempBuff);
			}

			sprintf(TempBuff,"  (no parameters)\n");
			FillRollingBuffer(TempBuff);
		}
		break;
	case URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROL:
		{
			struct _URB_FRAME_LENGTH_CONTROL *pFrameLengthControl = (struct _URB_FRAME_LENGTH_CONTROL *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROL:\n");
			FillRollingBuffer(TempBuff);
			if(pFrameLengthControl->Hdr.Length < sizeof(struct _URB_FRAME_LENGTH_CONTROL))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pFrameLengthControl->Hdr.Length, sizeof(struct _URB_FRAME_LENGTH_CONTROL));
				FillRollingBuffer(TempBuff);
			}

			sprintf(TempBuff,"  (no parameters)\n");
			FillRollingBuffer(TempBuff);
		}
		break;
	case URB_FUNCTION_GET_FRAME_LENGTH:
		{
			struct _URB_GET_FRAME_LENGTH   *pGetFrameLength = (struct _URB_GET_FRAME_LENGTH *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_GET_FRAME_LENGTH:\n");
			FillRollingBuffer(TempBuff);
			if(pGetFrameLength->Hdr.Length < sizeof(struct _URB_GET_FRAME_LENGTH))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pGetFrameLength->Hdr.Length, 
					sizeof(struct _URB_GET_FRAME_LENGTH));
				FillRollingBuffer(TempBuff);
			}

			if(bReturnedFromHCD)
			{
				sprintf(TempBuff,
					"\tFrameLength = %08x\n", 
					pGetFrameLength->FrameLength);
				FillRollingBuffer(TempBuff);
				sprintf(TempBuff,
					"\tFrameNumber = %08x\n", 
					pGetFrameLength->FrameNumber);
				FillRollingBuffer(TempBuff);
			}
		}
		break;
	case URB_FUNCTION_SET_FRAME_LENGTH:
		{
			struct _URB_SET_FRAME_LENGTH   *pSetFrameLength = (struct _URB_SET_FRAME_LENGTH *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_SET_FRAME_LENGTH:\n");
			FillRollingBuffer(TempBuff);
			if(pSetFrameLength->Hdr.Length < sizeof(struct _URB_SET_FRAME_LENGTH))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pSetFrameLength->Hdr.Length, 
					sizeof(struct _URB_SET_FRAME_LENGTH));
				FillRollingBuffer(TempBuff);
			}

			if(!bReturnedFromHCD)
			{
				sprintf(TempBuff,
					"  FrameLengthDelta = %08x\n", 
					pSetFrameLength->FrameLengthDelta);
				FillRollingBuffer(TempBuff);
			}
		}
		break;
	case URB_FUNCTION_GET_CURRENT_FRAME_NUMBER:
		{
			struct _URB_GET_CURRENT_FRAME_NUMBER   *pGetCurrentFrameNumber = (struct _URB_GET_CURRENT_FRAME_NUMBER *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_GET_CURRENT_FRAME_NUMBER:\n");
			FillRollingBuffer(TempBuff);
			if(pGetCurrentFrameNumber->Hdr.Length < sizeof(struct _URB_GET_CURRENT_FRAME_NUMBER))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pGetCurrentFrameNumber->Hdr.Length,
					sizeof(struct _URB_GET_CURRENT_FRAME_NUMBER));
				FillRollingBuffer(TempBuff);
			}

			if(bReturnedFromHCD)
			{
				sprintf(TempBuff,
					"  FrameNumber = %08x\n", 
					pGetCurrentFrameNumber->FrameNumber);
				FillRollingBuffer(TempBuff);
			}
		}
		break;
	case URB_FUNCTION_CONTROL_TRANSFER:
		{
			struct _URB_CONTROL_TRANSFER   *pControlTransfer = (struct _URB_CONTROL_TRANSFER *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_CONTROL_TRANSFER:\n");
			FillRollingBuffer(TempBuff);
			if(pControlTransfer->Hdr.Length < sizeof(struct _URB_CONTROL_TRANSFER))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pControlTransfer->Hdr.Length, 
					sizeof(struct _URB_CONTROL_TRANSFER));
				FillRollingBuffer(TempBuff);
			}

			BOOLEAN bReadFromDevice = (BOOLEAN)(pControlTransfer->TransferFlags & USBD_TRANSFER_DIRECTION_IN);
			DumpPipeHandle("\tPipeHandle\t\t",pControlTransfer->PipeHandle);
			sprintf(TempBuff,
				"\tTransferFlags\t\t= %08x (%s, %sUSBD_SHORT_TRANSFER_OK)\n",
				pControlTransfer->TransferFlags,
				bReadFromDevice ? "USBD_TRANSFER_DIRECTION_IN" : "USBD_TRANSFER_DIRECTION_OUT",
				pControlTransfer->TransferFlags & USBD_SHORT_TRANSFER_OK ? "":"~");
			FillRollingBuffer(TempBuff);
			DumpTransferBuffer((PUCHAR)pControlTransfer->TransferBuffer, pControlTransfer->TransferBufferMDL, pControlTransfer->TransferBufferLength, TRUE);
			if(((!bReadFromDevice) && (!bReturnedFromHCD)) || (bReadFromDevice && bReturnedFromHCD))
			{
				DumpTransferBuffer((PUCHAR)pControlTransfer->TransferBuffer, pControlTransfer->TransferBufferMDL, pControlTransfer->TransferBufferLength, FALSE);
			}

			sprintf(TempBuff,"\tUrbLink\t\t\t= %08x\n",
				pControlTransfer->UrbLink);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tSetupPacket\t\t:");
			FillRollingBuffer(TempBuff);

			for(int b=0; b<sizeof(pControlTransfer->SetupPacket); b++)
			{
				sprintf(TempBuff," %02x", 
					pControlTransfer->SetupPacket[b]);
				FillRollingBuffer(TempBuff);
			}
			sprintf(TempBuff,"\n");
			FillRollingBuffer(TempBuff);
			if(pControlTransfer->UrbLink)
			{
				sprintf(TempBuff,"---> Linked URB:\n");
				FillRollingBuffer(TempBuff);
				DumpURB(pControlTransfer->UrbLink, bReturnedFromHCD);
				sprintf(TempBuff,"---< Linked URB\n");
				FillRollingBuffer(TempBuff);
			}
		}
		break;
	case URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER:
		{
			struct _URB_BULK_OR_INTERRUPT_TRANSFER *pBulkOrInterruptTransfer = (struct _URB_BULK_OR_INTERRUPT_TRANSFER *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER:\n");
			FillRollingBuffer(TempBuff);
			if(pBulkOrInterruptTransfer->Hdr.Length < sizeof(struct _URB_BULK_OR_INTERRUPT_TRANSFER ))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pBulkOrInterruptTransfer->Hdr.Length, 
					sizeof(struct _URB_BULK_OR_INTERRUPT_TRANSFER));
				FillRollingBuffer(TempBuff);
			}

			BOOLEAN bReadFromDevice = (BOOLEAN)(pBulkOrInterruptTransfer->TransferFlags & USBD_TRANSFER_DIRECTION_IN);
			DumpPipeHandle("  PipeHandle          ",pBulkOrInterruptTransfer->PipeHandle);
			sprintf(TempBuff,
				"  TransferFlags        = %08x (%s, %sUSBD_SHORT_TRANSFER_OK)\n",
				pBulkOrInterruptTransfer->TransferFlags,
				bReadFromDevice ? "USBD_TRANSFER_DIRECTION_IN" : "USBD_TRANSFER_DIRECTION_OUT",
				pBulkOrInterruptTransfer->TransferFlags & USBD_SHORT_TRANSFER_OK ? "":"~");
			FillRollingBuffer(TempBuff);
			DumpTransferBuffer((PUCHAR)pBulkOrInterruptTransfer->TransferBuffer, pBulkOrInterruptTransfer->TransferBufferMDL, pBulkOrInterruptTransfer->TransferBufferLength, TRUE);
			if(((!bReadFromDevice) && (!bReturnedFromHCD)) || (bReadFromDevice && bReturnedFromHCD))
			{
				DumpTransferBuffer((PUCHAR)pBulkOrInterruptTransfer->TransferBuffer, pBulkOrInterruptTransfer->TransferBufferMDL, pBulkOrInterruptTransfer->TransferBufferLength, FALSE);
			}

			sprintf(TempBuff,"  UrbLink              = %08x\n",
				pBulkOrInterruptTransfer->UrbLink);
			FillRollingBuffer(TempBuff);
			if(pBulkOrInterruptTransfer->UrbLink)
			{
				sprintf(TempBuff,"---> Linked URB:\n");
				FillRollingBuffer(TempBuff);
				DumpURB(pBulkOrInterruptTransfer->UrbLink, bReturnedFromHCD);
				sprintf(TempBuff,"---< Linked URB\n");
				FillRollingBuffer(TempBuff);
			}
		}
		break;
	case URB_FUNCTION_ISOCH_TRANSFER:
		{
			struct _URB_ISOCH_TRANSFER *pIsochTransfer = (struct _URB_ISOCH_TRANSFER *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_ISOCH_TRANSFER:\n");
			FillRollingBuffer(TempBuff);
			if(pIsochTransfer->Hdr.Length < sizeof(struct _URB_ISOCH_TRANSFER ))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pIsochTransfer->Hdr.Length, 
					sizeof(struct _URB_ISOCH_TRANSFER));
				FillRollingBuffer(TempBuff);
			}

			BOOLEAN bReadFromDevice = (BOOLEAN)(pIsochTransfer->TransferFlags & USBD_TRANSFER_DIRECTION_IN);
			DumpPipeHandle("  PipeHandle          ",pIsochTransfer->PipeHandle);
			sprintf(TempBuff,
				"\tTransferFlags\t\t\t= %08x (%s, %sUSBD_SHORT_TRANSFER_OK%s\n",
				pIsochTransfer->TransferFlags,
				bReadFromDevice ? "USBD_TRANSFER_DIRECTION_IN" : "USBD_TRANSFER_DIRECTION_OUT",
				pIsochTransfer->TransferFlags & USBD_SHORT_TRANSFER_OK ? "":"~",
				pIsochTransfer->TransferFlags & USBD_START_ISO_TRANSFER_ASAP ? ", USBD_START_ISO_TRANSFER_ASAP" : "");
			FillRollingBuffer(TempBuff);
			DumpTransferBuffer((PUCHAR)pIsochTransfer->TransferBuffer, pIsochTransfer->TransferBufferMDL, pIsochTransfer->TransferBufferLength, TRUE);
			//if(((!bReadFromDevice) && (!bReturnedFromHCD)) || (bReadFromDevice && bReturnedFromHCD))
			//{				
			//	DumpTransferBuffer((PUCHAR)pIsochTransfer->TransferBuffer, pIsochTransfer->TransferBufferMDL, pIsochTransfer->TransferBufferLength, FALSE);
			//}
			//else
			//{
			//	sprintf(TempBuff,"bReadFromDevice = %x\nbReturnedFromHCD=%x\n",
			//		bReadFromDevice, bReturnedFromHCD);
			//	FillRollingBuffer(TempBuff);
			//}


			sprintf(TempBuff,"\tStartFrame\t\t\t= %08x\n",
				pIsochTransfer->StartFrame);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tNumberOfPackets\t\t= %08x\n", 
				pIsochTransfer->NumberOfPackets);
			FillRollingBuffer(TempBuff);
			if(bReturnedFromHCD)
			{
				sprintf(TempBuff,"\tErrorCount\t\t\t= %08x\n",
					pIsochTransfer->ErrorCount);
				FillRollingBuffer(TempBuff);
			}
			for(ULONG p=0; p < pIsochTransfer->NumberOfPackets; p++)
			{
				sprintf(TempBuff,"\tIsoPacket[%d].Offset = %x\n", p,
					pIsochTransfer->IsoPacket[p].Offset);
				FillRollingBuffer(TempBuff);
				sprintf(TempBuff,"\tIsoPacket[%d].Length = %x\n", p,
					pIsochTransfer->IsoPacket[p].Length);
				FillRollingBuffer(TempBuff);
				if(bReturnedFromHCD)
				{
					sprintf(TempBuff,"\tIsoPacket[%d].Status = %x\n", p,
					pIsochTransfer->IsoPacket[p].Status);
					FillRollingBuffer(TempBuff);
				}
				if(((!bReadFromDevice) && (!bReturnedFromHCD)) || (bReadFromDevice && bReturnedFromHCD))
					DumpTransferBuffer((PUCHAR)pIsochTransfer->TransferBuffer + pIsochTransfer->IsoPacket[p].Offset
							, 0, pIsochTransfer->IsoPacket[p].Length, FALSE);
			}
			sprintf(TempBuff,"\tUrbLink\t\t\t= %08x\n",
				pIsochTransfer->UrbLink);
			FillRollingBuffer(TempBuff);
			if(pIsochTransfer->UrbLink)
			{
				sprintf(TempBuff,"---> Linked URB:\n");
				FillRollingBuffer(TempBuff);
				DumpURB(pIsochTransfer->UrbLink, bReturnedFromHCD);
				sprintf(TempBuff,"---< Linked URB\n");
				FillRollingBuffer(TempBuff);
			}
		}
		break;
	case URB_FUNCTION_RESET_PIPE:
		{
			struct _URB_PIPE_REQUEST   *pResetPipe = (struct _URB_PIPE_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_RESET_PIPE:\n");
			FillRollingBuffer(TempBuff);
			if(pResetPipe->Hdr.Length < sizeof(struct _URB_PIPE_REQUEST))
				sprintf(TempBuff,
				"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
				pResetPipe->Hdr.Length, 
				sizeof(struct _URB_PIPE_REQUEST));
			FillRollingBuffer(TempBuff);

			if(!bReturnedFromHCD)
				DumpPipeHandle("  PipeHandle",pResetPipe->PipeHandle);
		}
		break;
	case URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE:
		{
			struct _URB_CONTROL_DESCRIPTOR_REQUEST   *pGetDescriptorFromDevice = (struct _URB_CONTROL_DESCRIPTOR_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE:\n");
			FillRollingBuffer(TempBuff);
			if(pGetDescriptorFromDevice->Hdr.Length < sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST))
			{
				sprintf(TempBuff,"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pGetDescriptorFromDevice->Hdr.Length, 
					sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpDescriptorRequest(pGetDescriptorFromDevice, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINT:
		{
			struct _URB_CONTROL_DESCRIPTOR_REQUEST   *pGetDescriptorFromEndpoint = (struct _URB_CONTROL_DESCRIPTOR_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINT:\n");
			FillRollingBuffer(TempBuff);
			if(pGetDescriptorFromEndpoint->Hdr.Length < sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pGetDescriptorFromEndpoint->Hdr.Length,
					sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpDescriptorRequest(pGetDescriptorFromEndpoint, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACE:
		{
			struct _URB_CONTROL_DESCRIPTOR_REQUEST   *pGetDescriptorFromInterface = (struct _URB_CONTROL_DESCRIPTOR_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACE:\n");
			FillRollingBuffer(TempBuff);
			if(pGetDescriptorFromInterface->Hdr.Length < sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pGetDescriptorFromInterface->Hdr.Length,
					sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpDescriptorRequest(pGetDescriptorFromInterface, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICE:
		{
			struct _URB_CONTROL_DESCRIPTOR_REQUEST   *pSetDescriptorToDevice = (struct _URB_CONTROL_DESCRIPTOR_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICE:\n");
			FillRollingBuffer(TempBuff);
			if(pSetDescriptorToDevice->Hdr.Length < sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pSetDescriptorToDevice->Hdr.Length,
					sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpDescriptorRequest(pSetDescriptorToDevice, FALSE, bReturnedFromHCD);
		}
		break;
	case URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINT:
		{
			struct _URB_CONTROL_DESCRIPTOR_REQUEST   *pSetDescriptorToEndpoint = (struct _URB_CONTROL_DESCRIPTOR_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINT:\n");
			FillRollingBuffer(TempBuff);
			if(pSetDescriptorToEndpoint->Hdr.Length < sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pSetDescriptorToEndpoint->Hdr.Length,
					sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpDescriptorRequest(pSetDescriptorToEndpoint, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACE:
		{
			struct _URB_CONTROL_DESCRIPTOR_REQUEST   *pSetDescriptorToInterface = (struct _URB_CONTROL_DESCRIPTOR_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACE:\n");
			FillRollingBuffer(TempBuff);
			if(pSetDescriptorToInterface->Hdr.Length < sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pSetDescriptorToInterface->Hdr.Length, 
					sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpDescriptorRequest(pSetDescriptorToInterface, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_SET_FEATURE_TO_DEVICE:
		{
			struct _URB_CONTROL_FEATURE_REQUEST   *pSetFeatureToDevice = (struct _URB_CONTROL_FEATURE_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_SET_FEATURE_TO_DEVICE:\n");
			FillRollingBuffer(TempBuff);
			if(pSetFeatureToDevice->Hdr.Length < sizeof(struct _URB_CONTROL_FEATURE_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pSetFeatureToDevice->Hdr.Length, 
					sizeof(struct _URB_CONTROL_FEATURE_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpFeatureRequest(pSetFeatureToDevice, TRUE, bReturnedFromHCD);
 
		}
		break;
	case URB_FUNCTION_SET_FEATURE_TO_INTERFACE:
		{
			struct _URB_CONTROL_FEATURE_REQUEST   *pSetFeatureToInterface = (struct _URB_CONTROL_FEATURE_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_SET_FEATURE_TO_INTERFACE:\n");
			FillRollingBuffer(TempBuff);
			if(pSetFeatureToInterface->Hdr.Length < sizeof(struct _URB_CONTROL_FEATURE_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pSetFeatureToInterface->Hdr.Length, 
					sizeof(struct _URB_CONTROL_FEATURE_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpFeatureRequest(pSetFeatureToInterface, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_SET_FEATURE_TO_ENDPOINT:
		{
			struct _URB_CONTROL_FEATURE_REQUEST   *pSetFeatureToEndpoint = (struct _URB_CONTROL_FEATURE_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_SET_FEATURE_TO_ENDPOINT:\n");
			FillRollingBuffer(TempBuff);
			if(pSetFeatureToEndpoint->Hdr.Length < sizeof(struct _URB_CONTROL_FEATURE_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pSetFeatureToEndpoint->Hdr.Length, 
					sizeof(struct _URB_CONTROL_FEATURE_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpFeatureRequest(pSetFeatureToEndpoint, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_SET_FEATURE_TO_OTHER:
		{
			struct _URB_CONTROL_FEATURE_REQUEST   *pSetFeatureToOther = (struct _URB_CONTROL_FEATURE_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_SET_FEATURE_TO_OTHER:\n");
			FillRollingBuffer(TempBuff);
			if(pSetFeatureToOther->Hdr.Length < sizeof(struct _URB_CONTROL_FEATURE_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pSetFeatureToOther->Hdr.Length,
					sizeof(struct _URB_CONTROL_FEATURE_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpFeatureRequest(pSetFeatureToOther, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_CLEAR_FEATURE_TO_DEVICE:
		{
			struct _URB_CONTROL_FEATURE_REQUEST   *pClearFeatureToDevice = (struct _URB_CONTROL_FEATURE_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_CLEAR_FEATURE_TO_DEVICE:\n");
			FillRollingBuffer(TempBuff);
			if(pClearFeatureToDevice->Hdr.Length < sizeof(struct _URB_CONTROL_FEATURE_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pClearFeatureToDevice->Hdr.Length,
					sizeof(struct _URB_CONTROL_FEATURE_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpFeatureRequest(pClearFeatureToDevice, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACE:
		{
			struct _URB_CONTROL_FEATURE_REQUEST   *pClearFeatureToInterface = (struct _URB_CONTROL_FEATURE_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACE:\n");
			FillRollingBuffer(TempBuff);
			if(pClearFeatureToInterface->Hdr.Length < sizeof(struct _URB_CONTROL_FEATURE_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pClearFeatureToInterface->Hdr.Length, 
					sizeof(struct _URB_CONTROL_FEATURE_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpFeatureRequest(pClearFeatureToInterface, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINT:
		{
			struct _URB_CONTROL_FEATURE_REQUEST   *pClearFeatureToEndpoint = (struct _URB_CONTROL_FEATURE_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINT:\n");
			FillRollingBuffer(TempBuff);
			if(pClearFeatureToEndpoint->Hdr.Length < sizeof(struct _URB_CONTROL_FEATURE_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pClearFeatureToEndpoint->Hdr.Length,
					sizeof(struct _URB_CONTROL_FEATURE_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpFeatureRequest(pClearFeatureToEndpoint, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_CLEAR_FEATURE_TO_OTHER:
		{
			struct _URB_CONTROL_FEATURE_REQUEST   *pClearFeatureToOther = (struct _URB_CONTROL_FEATURE_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_CLEAR_FEATURE_TO_OTHER:\n");
			FillRollingBuffer(TempBuff);
			if(pClearFeatureToOther->Hdr.Length < sizeof(struct _URB_CONTROL_FEATURE_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pClearFeatureToOther->Hdr.Length,
					sizeof(struct _URB_CONTROL_FEATURE_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpFeatureRequest(pClearFeatureToOther, TRUE, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_GET_STATUS_FROM_DEVICE:
		{
			struct _URB_CONTROL_GET_STATUS_REQUEST *pGetStatusFromDevice = (struct _URB_CONTROL_GET_STATUS_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_GET_STATUS_FROM_DEVICE:\n");
			FillRollingBuffer(TempBuff);
			if(pGetStatusFromDevice->Hdr.Length < sizeof(struct _URB_CONTROL_GET_STATUS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pGetStatusFromDevice->Hdr.Length,
					sizeof(struct _URB_CONTROL_GET_STATUS_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpGetStatusRequest(pGetStatusFromDevice, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_GET_STATUS_FROM_INTERFACE:
		{
			struct _URB_CONTROL_GET_STATUS_REQUEST *pGetStatusFromInterface = (struct _URB_CONTROL_GET_STATUS_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_GET_STATUS_FROM_INTERFACE:\n");
			FillRollingBuffer(TempBuff);
			if(pGetStatusFromInterface->Hdr.Length < sizeof(struct _URB_CONTROL_GET_STATUS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n",
					pGetStatusFromInterface->Hdr.Length, 
					sizeof(struct _URB_CONTROL_GET_STATUS_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpGetStatusRequest(pGetStatusFromInterface, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_GET_STATUS_FROM_ENDPOINT:
		{
			struct _URB_CONTROL_GET_STATUS_REQUEST *pGetStatusFromEndpoint = (struct _URB_CONTROL_GET_STATUS_REQUEST *) pUrb;

			sprintf(TempBuff,
				"-- URB_FUNCTION_GET_STATUS_FROM_ENDPOINT:\n");
			FillRollingBuffer(TempBuff);
			if(pGetStatusFromEndpoint->Hdr.Length < sizeof(struct _URB_CONTROL_GET_STATUS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pGetStatusFromEndpoint->Hdr.Length,
					sizeof(struct _URB_CONTROL_GET_STATUS_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpGetStatusRequest(pGetStatusFromEndpoint, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_GET_STATUS_FROM_OTHER:
		{
			struct _URB_CONTROL_GET_STATUS_REQUEST *pGetStatusFromOther = (struct _URB_CONTROL_GET_STATUS_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_GET_STATUS_FROM_OTHER:\n");
			FillRollingBuffer(TempBuff);
			if(pGetStatusFromOther->Hdr.Length < sizeof(struct _URB_CONTROL_GET_STATUS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pGetStatusFromOther->Hdr.Length, 
					sizeof(struct _URB_CONTROL_GET_STATUS_REQUEST));
				FillRollingBuffer(TempBuff);
			}
			DumpGetStatusRequest(pGetStatusFromOther, bReturnedFromHCD);

		}
		break;
	case URB_FUNCTION_VENDOR_DEVICE:
		{
			struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *pFunctionVendorDevice = (struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *) pUrb;

			sprintf(TempBuff, "-- URB_FUNCTION_VENDOR_DEVICE:\n");
			FillRollingBuffer(TempBuff);
			if(pFunctionVendorDevice->Hdr.Length < sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pFunctionVendorDevice->Hdr.Length, 
					sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST));
				FillRollingBuffer(TempBuff);
			}

			DumpVendorOrClassRequest(pFunctionVendorDevice, bReturnedFromHCD);
		}
		break;
	case URB_FUNCTION_VENDOR_INTERFACE:
		{
			struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *pFunctionVendorInterface = (struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_VENDOR_INTERFACE:\n");
			FillRollingBuffer(TempBuff);
			if(pFunctionVendorInterface->Hdr.Length < sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pFunctionVendorInterface->Hdr.Length, 
					sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST));
				FillRollingBuffer(TempBuff);
			}

			DumpVendorOrClassRequest(pFunctionVendorInterface, bReturnedFromHCD);
		}
		break;
	case URB_FUNCTION_VENDOR_ENDPOINT:
		{
			struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *pFunctionVendorEndpoint = (struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_VENDOR_ENDPOINT:\n");
			FillRollingBuffer(TempBuff);
			if(pFunctionVendorEndpoint->Hdr.Length < sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pFunctionVendorEndpoint->Hdr.Length, 
					sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST));
				FillRollingBuffer(TempBuff);
			}

			DumpVendorOrClassRequest(pFunctionVendorEndpoint, bReturnedFromHCD);
		}
		break;
	case URB_FUNCTION_VENDOR_OTHER:
		{
			struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *pFunctionVendorOther = (struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_VENDOR_OTHER:\n");
			FillRollingBuffer(TempBuff);
			if(pFunctionVendorOther->Hdr.Length < sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pFunctionVendorOther->Hdr.Length, 
					sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST));
				FillRollingBuffer(TempBuff);
			}

			DumpVendorOrClassRequest(pFunctionVendorOther, bReturnedFromHCD);
		}
		break;
	case URB_FUNCTION_CLASS_DEVICE:
		{
			struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *pFunctionClassDevice = (struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_CLASS_DEVICE:\n");
			FillRollingBuffer(TempBuff);
			if(pFunctionClassDevice->Hdr.Length < sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pFunctionClassDevice->Hdr.Length, 
					sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST));
				FillRollingBuffer(TempBuff);
			}

			DumpVendorOrClassRequest(pFunctionClassDevice, bReturnedFromHCD);
		}
		break;
	case URB_FUNCTION_CLASS_INTERFACE:
		{
			struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *pFunctionClassInterface = (struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_CLASS_INTERFACE:\n");
			FillRollingBuffer(TempBuff);
			if(pFunctionClassInterface->Hdr.Length < sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pFunctionClassInterface->Hdr.Length, 
					sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST));
				FillRollingBuffer(TempBuff);
			}

			DumpVendorOrClassRequest(pFunctionClassInterface, bReturnedFromHCD);
		}
		break;
	case URB_FUNCTION_CLASS_ENDPOINT:
		{
			struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *pFunctionClassEndpoint = (struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_CLASS_ENDPOINT:\n");
			FillRollingBuffer(TempBuff);
			if(pFunctionClassEndpoint->Hdr.Length < sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pFunctionClassEndpoint->Hdr.Length, 
					sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST));
				FillRollingBuffer(TempBuff);
			}

			DumpVendorOrClassRequest(pFunctionClassEndpoint, bReturnedFromHCD);
		}
		break;
	case URB_FUNCTION_CLASS_OTHER:
		{
			struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *pFunctionClassOther = (struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_CLASS_OTHER:\n");
			FillRollingBuffer(TempBuff);
			if(pFunctionClassOther->Hdr.Length < sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pFunctionClassOther->Hdr.Length, 
					sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST));
				FillRollingBuffer(TempBuff);
			}

			DumpVendorOrClassRequest(pFunctionClassOther, bReturnedFromHCD);
		}
		break;
	case URB_FUNCTION_GET_CONFIGURATION:
		{
			struct _URB_CONTROL_GET_CONFIGURATION_REQUEST *pGetConfiguration = (struct _URB_CONTROL_GET_CONFIGURATION_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_GET_CONFIGURATION:\n");
			FillRollingBuffer(TempBuff);
			if(pGetConfiguration->Hdr.Length < sizeof(struct _URB_CONTROL_VENDOR_OR_CLASS_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pGetConfiguration->Hdr.Length, 
					sizeof(struct _URB_CONTROL_GET_CONFIGURATION_REQUEST));
				FillRollingBuffer(TempBuff);
			}

			DumpTransferBuffer((PUCHAR)pGetConfiguration->TransferBuffer, pGetConfiguration->TransferBufferMDL, pGetConfiguration->TransferBufferLength, TRUE);
			if(pGetConfiguration->TransferBufferLength != 1)
			{
				sprintf(TempBuff,
					"  *** error - TransferBufferLength should be 1!\n");
				FillRollingBuffer(TempBuff);
			}

			if(bReturnedFromHCD)
			{
				DumpTransferBuffer((PUCHAR)pGetConfiguration->TransferBuffer, pGetConfiguration->TransferBufferMDL, pGetConfiguration->TransferBufferLength, FALSE);
			}

			sprintf(TempBuff,
				"  UrbLink              = %08x\n",
				pGetConfiguration->UrbLink);
			FillRollingBuffer(TempBuff);
			if(pGetConfiguration->UrbLink)
			{
				sprintf(TempBuff,"---> Linked URB:\n");
				FillRollingBuffer(TempBuff);
				DumpURB(pGetConfiguration->UrbLink, bReturnedFromHCD);
				sprintf(TempBuff,"---< Linked URB\n");
				FillRollingBuffer(TempBuff);
			}
		}
		break;
	case URB_FUNCTION_GET_INTERFACE:
		{
			struct _URB_CONTROL_GET_INTERFACE_REQUEST *pGetInterface = (struct _URB_CONTROL_GET_INTERFACE_REQUEST *) pUrb;

			sprintf(TempBuff,"-- URB_FUNCTION_GET_INTERFACE:\n");
			FillRollingBuffer(TempBuff);
			if(pGetInterface->Hdr.Length < sizeof(struct _URB_CONTROL_GET_INTERFACE_REQUEST))
			{
				sprintf(TempBuff,
					"!!! Hdr.Length is wrong! (is: %d, should be at least: %d)\n", 
					pGetInterface->Hdr.Length, 
					sizeof(struct _URB_CONTROL_GET_CONFIGURATION_REQUEST));
				FillRollingBuffer(TempBuff);
			}

			DumpTransferBuffer((PUCHAR)pGetInterface->TransferBuffer, pGetInterface->TransferBufferMDL, pGetInterface->TransferBufferLength, TRUE);
			if(pGetInterface->TransferBufferLength != 1)
			{
				sprintf(TempBuff,
					"  *** error - TransferBufferLength should be 1!\n");
				FillRollingBuffer(TempBuff);
			}

			if(bReturnedFromHCD)
			{
				DumpTransferBuffer((PUCHAR)pGetInterface->TransferBuffer, pGetInterface->TransferBufferMDL, pGetInterface->TransferBufferLength, FALSE);
			}

			sprintf(TempBuff,"\tInterface\t\t\t= %02x\n",
				pGetInterface->UrbLink);
			FillRollingBuffer(TempBuff);
			sprintf(TempBuff,"\tUrbLink\t\t\t= %08x\n",
				pGetInterface->UrbLink);
			FillRollingBuffer(TempBuff);
			if(pGetInterface->UrbLink)
			{
				sprintf(TempBuff,"---> Linked URB:\n");
				FillRollingBuffer(TempBuff);
				DumpURB(pGetInterface->UrbLink, bReturnedFromHCD);
				sprintf(TempBuff,"---< Linked URB\n");
				FillRollingBuffer(TempBuff);
			}
		}
		break;

	default:
		sprintf(TempBuff,
			"******* non printable URB with function code 0x%04x ********\n", 
			wFunction);
		FillRollingBuffer(TempBuff);
		break;
	}	// end of mega switch
	KeReleaseSemaphore(&DataToBeRead,0,1,FALSE);
}

NTSTATUS InternalIOCTLCompletion(IN PDEVICE_OBJECT fido, IN PIRP Irp, IN PVOID Context)
{
	sprintf(TempBuff,
		"UsbSnoop - InternalIOCTLCompletion(%p) : fido=%p, Irp=%p, Context=%p\n",
		InternalIOCTLCompletion,fido,Irp,Context);
	FillRollingBuffer(TempBuff);
//	DumpIrp(Irp);

	PIO_STACK_LOCATION stack = IoGetCurrentIrpStackLocation(Irp);

    if (Irp->PendingReturned) {
		sprintf(TempBuff,"\tIoMarkIrpPending\n");
		FillRollingBuffer(TempBuff);
        IoMarkIrpPending( Irp );
    }

	ULONG uSequenceNumber = (ULONG)Context;
	ULONG dwControlCode = stack->Parameters.DeviceIoControl.IoControlCode;
	if(IOCTL_INTERNAL_USB_SUBMIT_URB == dwControlCode)
	{
		sprintf(TempBuff,"~<<<~ URB %d coming back ~<<<~\n",
			uSequenceNumber);
		FillRollingBuffer(TempBuff);
		PURB pUrb = (PURB)stack->Parameters.Others.Argument1;
		DumpURB(pUrb, TRUE);
	}
// TODO: check this line with the one in the downward irp handler! //	IoReleaseRemoveLock(&pdx->RemoveLock, Irp);
	return STATUS_SUCCESS;
}

NTSTATUS MyInternalIOCTLCompletion(IN PDEVICE_OBJECT fido, IN PIRP Irp, IN PVOID inContext)
{
	sprintf(TempBuff,
		"UsbSnoop - MyInternalIOCTLCompletion(%p) : fido=%p, Irp=%p, Context=%p\n",
		MyInternalIOCTLCompletion,fido,Irp,inContext);
	FillRollingBuffer(TempBuff);

//	DumpIrp(Irp);

	PCONTEXT Context = (PCONTEXT)inContext;
//	DumpContext(Context);

	// restoring information.

	Context->Stack->CompletionRoutine = Context->CompletionRoutine;
	Context->Stack->Context           = Context->Context;
	Context->Stack->Control           = Context->Control;

	// dumping URB 
	sprintf(TempBuff,
		" <<<  URB %d coming back  <<< \n",Context->uSequenceNumber);
	FillRollingBuffer(TempBuff);
	DumpURB(Context->pUrb, TRUE);


	// saving some field before freeing the structure
	PVOID OldContext = Context->Context;
	PIO_COMPLETION_ROUTINE OldCompletionRoutine = Context->CompletionRoutine;

	// freeing the allocated structure
	ExFreePool(Context);

	// calling the old CompletionRoutine, if there was one

	if (OldCompletionRoutine != NULL)
		return OldCompletionRoutine(fido,Irp,OldContext);

	return STATUS_SUCCESS;
}

NTSTATUS MyDispatchInternalIOCTL(IN PDEVICE_OBJECT fdo, IN PIRP Irp)
{
	sprintf(TempBuff,
		"UsbSnoop - MyDispatchInternalIOCTL(%p) : fdo=%p, Irp=%p\n",
		MyDispatchInternalIOCTL,fdo,Irp);
	FillRollingBuffer(TempBuff);
//	DumpDeviceObject(fdo);
//	DumpIrp(Irp);

	// we want to recover OriginalDriverObject which is stored in fido,
	// so we need to recover fido first, by the AttachedDevice field from FDO.

	PDEVICE_OBJECT fido = fdo->AttachedDevice;
//	KdPrint(("  fido = %p\n",fido));

	PDEVICE_EXTENSION pdx = (PDEVICE_EXTENSION) fido->DeviceExtension;
//	KdPrint(("  OriginalDriverObject = %p\n",pdx->OriginalDriverObject));

	// try to print the URB 

	PIO_STACK_LOCATION stack = IoGetCurrentIrpStackLocation(Irp);
	ULONG dwControlCode = stack->Parameters.DeviceIoControl.IoControlCode;
//	KdPrint(("  dwControlCode=%d\n",dwControlCode));
	if (dwControlCode == IOCTL_INTERNAL_USB_SUBMIT_URB)
	{
		ULONG uSequenceNumber = InterlockedIncrement((PLONG)&pdx->uSequenceNumber);
		// KdPrint((" >>>  URB %d going down  >>> \n", uSequenceNumber));
		sprintf(TempBuff," >>>  URB %d going down  >>>\n",
			uSequenceNumber);
		FillRollingBuffer(TempBuff);

		PURB pUrb = (PURB) stack->Parameters.Others.Argument1;
		DumpURB(pUrb,FALSE);

		// inspired from the macro code of IoSetCompletionRoutine
		// it just makes a big BSOD

		// ok. in fact, it worked, but that particular case,
		// the first parameter of the IoCompletionRoutine is NULL instead of being fido !!!

		// normalling, there should be a call to IoCopyCurrentIrpStackLocationToNext()
		// which might not be there. So, we are surely replacing other callbacks.

		// first, we saved every information we'll modify later

		PCONTEXT Context = (PCONTEXT)ExAllocatePool(PagedPool,sizeof(CONTEXT));
		if (Context != NULL)
		{
			Context->CompletionRoutine = stack->CompletionRoutine;
			Context->Context           = stack->Context;
			Context->Control           = stack->Control;
			Context->pUrb              = pUrb;
			Context->uSequenceNumber   = uSequenceNumber;
			Context->Stack             = stack;

//			KdPrint(("  Replacing %p/%p/%p by ",
//				stack->CompletionRoutine,stack->Context,stack->Control));
			stack->CompletionRoutine = MyInternalIOCTLCompletion;
			stack->Context = Context;
			stack->Control = SL_INVOKE_ON_SUCCESS | SL_INVOKE_ON_ERROR | SL_INVOKE_ON_CANCEL;

//			KdPrint(("%p/%p/%p\n",stack->CompletionRoutine,stack->Context,stack->Control));
		}
		else
		{
			sprintf(TempBuff,
			"  ExAllocatePool failed! Can't redirect CompletionRoutine\n");
			FillRollingBuffer(TempBuff);
		}
	}

	return pdx->OriginalDriverObject->MajorFunction[IRP_MJ_INTERNAL_DEVICE_CONTROL](fdo,Irp);
}

NTSTATUS DispatchInternalIOCTL(IN PDEVICE_OBJECT fido, IN PIRP Irp)
{
	PDEVICE_EXTENSION pdx = (PDEVICE_EXTENSION) fido->DeviceExtension;
	PIO_STACK_LOCATION stack = IoGetCurrentIrpStackLocation(Irp);

	sprintf(TempBuff,
		"UsbSnoop - DispatchInternalIOCTL(%p) : fido=%p, Irp=%p\n",
		DispatchInternalIOCTL,fido,Irp);
	FillRollingBuffer(TempBuff);
//	DumpDeviceObject(fido);
//	DumpIrp(Irp);
	
	UCHAR type = stack->MinorFunction;
	PCHAR pFuncName = NULL;

	ULONG dwControlCode = stack->Parameters.DeviceIoControl.IoControlCode;
	switch(dwControlCode)
	{
	case IOCTL_INTERNAL_USB_SUBMIT_URB:
		pFuncName = "IOCTL_INTERNAL_USB_SUBMIT_URB";
		break;

	case IOCTL_INTERNAL_USB_RESET_PORT:
		pFuncName = "IOCTL_INTERNAL_USB_RESET_PORT";
		break;

	case IOCTL_INTERNAL_USB_GET_ROOTHUB_PDO:
		pFuncName = "IOCTL_INTERNAL_USB_GET_ROOTHUB_PDO";
		break;

	case IOCTL_INTERNAL_USB_GET_PORT_STATUS:
		pFuncName = "IOCTL_INTERNAL_USB_GET_PORT_STATUS";
		break;

	case IOCTL_INTERNAL_USB_ENABLE_PORT:
		pFuncName = "IOCTL_INTERNAL_USB_ENABLE_PORT";
		break;

	case IOCTL_INTERNAL_USB_GET_HUB_COUNT:
		pFuncName = "IOCTL_INTERNAL_USB_GET_HUB_COUNT";
		break;

	case IOCTL_INTERNAL_USB_CYCLE_PORT:
		pFuncName = "IOCTL_INTERNAL_USB_CYCLE_PORT";
		break;
// following IOCTL_XXX are not defined under Windows 98 DDK
/*
	case IOCTL_INTERNAL_USB_GET_HUB_NAME:
		pFuncName = "IOCTL_INTERNAL_USB_GET_HUB_NAME";
		break;

	case IOCTL_INTERNAL_USB_GET_BUS_INFO:
		pFuncName = "IOCTL_INTERNAL_USB_GET_BUS_INFO";
		break;

	case IOCTL_INTERNAL_USB_GET_CONTROLLER_NAME:
		pFuncName = "IOCTL_INTERNAL_USB_GET_CONTROLLER_NAME";
		break;
*/
	default:
		pFuncName = NULL;
		break;
	}
	
	if(pFuncName)
		sprintf(TempBuff,
			"UsbSnoop - IRP_MJ_INTERNAL_DEVICE_CONTROL, %s\n",
			pFuncName);
	else
		sprintf(TempBuff,
			"UsbSnoop - IRP_MJ_INTERNAL_DEVICE_CONTROL, unknown minor 0x%x\n",
			dwControlCode);
	FillRollingBuffer(TempBuff);

	NTSTATUS status;
	status = IoAcquireRemoveLock(&pdx->RemoveLock, Irp);
	if (!NT_SUCCESS(status))
		return CompleteRequest(Irp, status, 0);

	if(IOCTL_INTERNAL_USB_SUBMIT_URB == dwControlCode)
	{
		ULONG uSequenceNumber = InterlockedIncrement((PLONG)&pdx->uSequenceNumber);
		sprintf(TempBuff,
			"~>>>~ URB %d going down ~>>>~\n", uSequenceNumber);
		FillRollingBuffer("~>>>~ URB %d going down ~>>>\n");
		PURB pUrb = (PURB)stack->Parameters.Others.Argument1;
		DumpURB(pUrb, FALSE);
		IoCopyCurrentIrpStackLocationToNext(Irp);
		IoSetCompletionRoutine(Irp, InternalIOCTLCompletion, (PVOID)uSequenceNumber, TRUE, TRUE, TRUE);


//		DumpIrp(Irp);
		status = IoCallDriver(pdx->LowerDeviceObject, Irp);

		// after IoCallDriver, Irp is no longer something usable
		//DumpIrp(Irp);
/// TODO - check next line with the one in the completion routine!
		IoReleaseRemoveLock(&pdx->RemoveLock, Irp);
	}
	else
	{
		IoSkipCurrentIrpStackLocation(Irp);
		status = IoCallDriver(pdx->LowerDeviceObject, Irp);
		IoReleaseRemoveLock(&pdx->RemoveLock, Irp);
	}
	
	return status;
}

/*
	DispatchPower - need a special code, since we have to call PoCallDriver()
	instead of IoCallDriver()
*/

NTSTATUS DispatchPower(IN PDEVICE_OBJECT fido, IN PIRP Irp)
{
	PIO_STACK_LOCATION stack = IoGetCurrentIrpStackLocation(Irp);
	ULONG fcn = stack->MinorFunction;
	
	const char* fcnname[] =
	{
		"IRP_MN_WAIT_WAKE",
		"IRP_MN_POWER_SEQUENCE",
		"IRP_MN_SET_POWER",
		"IRP_MN_QUERY_POWER",
	};
	
	if (fcn == IRP_MN_SET_POWER || fcn == IRP_MN_QUERY_POWER)
	{
		const char* sysstate[] =
		{
			"PowerSystemUnspecified",
			"PowerSystemWorking",
			"PowerSystemSleeping1",
			"PowerSystemSleeping2",
			"PowerSystemSleeping3",
			"PowerSystemHibernate",
			"PowerSystemShutdown",
			"PowerSystemMaximum",
		};
		
		const char* devstate[] =
		{
			"PowerDeviceUnspecified",
			"PowerDeviceD0",
			"PowerDeviceD1",
			"PowerDeviceD2",
			"PowerDeviceD3",
			"PowerDeviceMaximum",
		};
		
		ULONG context = stack->Parameters.Power.SystemContext;
		POWER_STATE_TYPE type = stack->Parameters.Power.Type;
		
		sprintf(TempBuff,
			"UsbSnoop - IRP_MJ_POWER (%s), SystemContext %X",
			fcnname[fcn], context);
		FillRollingBuffer(TempBuff);
		if (type == SystemPowerState)
			sprintf(TempBuff,
				", SystemPowerState = %s\n",
				sysstate[stack->Parameters.Power.State.SystemState]);
		else
			sprintf(TempBuff,", DevicePowerState = %s\n",
				devstate[stack->Parameters.Power.State.DeviceState]);
		FillRollingBuffer(TempBuff);
	}
	else
		sprintf(TempBuff,"UsbSnoop - IRP_MJ_POWER (%s)\n", fcnname[fcn]);
	FillRollingBuffer(TempBuff);
		
	PDEVICE_EXTENSION pdx = (PDEVICE_EXTENSION) fido->DeviceExtension;
	PoStartNextPowerIrp(Irp);	// must be done while we own the IRP
	NTSTATUS status;
	status = IoAcquireRemoveLock(&pdx->RemoveLock, Irp);
	if (!NT_SUCCESS(status))
		return CompleteRequest(Irp, status, 0);
	IoSkipCurrentIrpStackLocation(Irp);
	status = PoCallDriver(pdx->LowerDeviceObject, Irp);
	IoReleaseRemoveLock(&pdx->RemoveLock, Irp);
	return status;
}

///////////////////////////////////////////////////////////////////////////////

NTSTATUS DispatchPnp(IN PDEVICE_OBJECT fido, IN PIRP Irp)
{
	PIO_STACK_LOCATION stack = IoGetCurrentIrpStackLocation(Irp);
	ULONG fcn = stack->MinorFunction;
	
	const char * MinorFunctionName = GetIrpPnpMinorFunctionName(fcn);
	if (MinorFunctionName != NULL)
		sprintf(TempBuff,
			"UsbSnoop - DispatchPNP(%p) : IRP_MJ_PNP (%s)\n",
			DispatchPnp,MinorFunctionName);
	else
		sprintf(TempBuff,
		"UsbSnoop - DispatchPNP(%p) : IRP_MJ_PNP (0x%x)\n",
			DispatchPnp,fcn);
	FillRollingBuffer(TempBuff);
	
	NTSTATUS status;
	PDEVICE_EXTENSION pdx = (PDEVICE_EXTENSION) fido->DeviceExtension;
	status = IoAcquireRemoveLock(&pdx->RemoveLock, Irp);
	if (!NT_SUCCESS(status))
		return CompleteRequest(Irp, status, 0);
	IoSkipCurrentIrpStackLocation(Irp);
	status = IoCallDriver(pdx->LowerDeviceObject, Irp);
	
	if (fcn == IRP_MN_REMOVE_DEVICE)
	{
		IoReleaseRemoveLockAndWait(&pdx->RemoveLock, Irp);
		RemoveDevice(fido);
	}
	else
		IoReleaseRemoveLock(&pdx->RemoveLock, Irp);
	
	return status;
}

///////////////////////////////////////////////////////////////////////////////

NTSTATUS DispatchWmi(IN PDEVICE_OBJECT fido, IN PIRP Irp)
{							// DispatchWmi
#if DBG
	PIO_STACK_LOCATION stack = IoGetCurrentIrpStackLocation(Irp);
	ULONG fcn = stack->MinorFunction;
	
	static char* fcnname[] = {
		"IRP_MN_QUERY_ALL_DATA",
		"IRP_MN_QUERY_SINGLE_INSTANCE",
		"IRP_MN_CHANGE_SINGLE_INSTANCE",
		"IRP_MN_CHANGE_SINGLE_ITEM",
		"IRP_MN_ENABLE_EVENTS",
		"IRP_MN_DISABLE_EVENTS",
		"IRP_MN_ENABLE_COLLECTION",
		"IRP_MN_DISABLE_COLLECTION",
		"IRP_MN_REGINFO",
		"IRP_MN_EXECUTE_METHOD",
	};
	
	sprintf(TempBuff,
		"UsbSnoop - IRP_MJ_SYSTEM_CONTROL (%s)\n", fcnname[fcn]);
	FillRollingBuffer(TempBuff);
#endif // DBG
	
	NTSTATUS status;
	PDEVICE_EXTENSION pdx = (PDEVICE_EXTENSION) fido->DeviceExtension;
	status = IoAcquireRemoveLock(&pdx->RemoveLock, Irp);
	if (!NT_SUCCESS(status))
		return CompleteRequest(Irp, status, 0);
	IoSkipCurrentIrpStackLocation(Irp);
	status = IoCallDriver(pdx->LowerDeviceObject, Irp);
	IoReleaseRemoveLock(&pdx->RemoveLock, Irp);
	return status;
}

///////////////////////////////////////////////////////////////////////////////

#pragma PAGEDCODE

VOID RemoveDevice(IN PDEVICE_OBJECT fido)
{
	PAGED_CODE();
	PDEVICE_EXTENSION pdx = (PDEVICE_EXTENSION) fido->DeviceExtension;

	sprintf(TempBuff,
		"UsbSnoop - RemoveDevice(%p) : fido = %p\n",RemoveDevice,fido);
	FillRollingBuffer(TempBuff);
	
	if (pdx->LowerDeviceObject)
	{
		// save our modified PDRIVER_OBJECT
		PDRIVER_OBJECT d = pdx->LowerDeviceObject->DriverObject;

		// restore the driver pointer in the PDO
		pdx->LowerDeviceObject->DriverObject = pdx->OriginalDriverObject;

		IoDetachDevice(pdx->LowerDeviceObject);

		// free our modified PDRIVER_OBJECT
		ExFreePool(d);
	}

	IoDeleteDevice(fido);
}

///////////////////////////////////////////////////////////////////////////////

#pragma LOCKEDCODE

extern "C" void __declspec(naked) __cdecl _chkesp()
{
	_asm je okay
	ASSERT(!"Stack pointer mismatch!");
okay:
	_asm ret
}


